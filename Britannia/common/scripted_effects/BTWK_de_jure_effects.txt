# Sets the title's new de jure liege
# FLAG - The flag/variable that is checked to determine if this de jure liege change is supposed to be in effect
# FLAG_SCOPE - The title that the FLAG is checked on
# NEW_DE_JURE_LIEGE - The new de jure liege (usually a variable)
# If the [flag]_pretend scope is set to the scoped title, then the flag is considered set even if it isn't 
# actually, and [flag]_pretend_target is set as the de jure liege if it exists 
# (overriding NEW_DE_JURE_LIEGE) - this is used for tooltip purposes
set_title_flagged_de_jure_liege_effect = {
	if = {
		limit = { 
			scope:$FLAG$_pretend ?= $FLAG_SCOPE$
			exists = scope:$FLAG$_pretend_target
		}
		if = {
			limit = { NOT = { de_jure_liege = scope:$FLAG$_pretend_target } }
			set_de_jure_liege_title = scope:$FLAG$_pretend_target
		}
	}
	else = {
		if = {
			limit = { NOT = { de_jure_liege = $NEW_DE_JURE_LIEGE$ } }
			set_de_jure_liege_title = $NEW_DE_JURE_LIEGE$
		}
	}
}

set_kingdom_region_de_jure_liege_effect = {
	$NEW_DE_JURE_LIEGE$ = { save_temporary_scope_as = new_liege }
	$REGION_BASE$ = {
		this.var:kingdom_region_empire = { save_temporary_scope_as = old_liege }
		set_variable = {
			name = kingdom_region_empire
			value = scope:new_liege
		}
		every_in_list = {
			variable = kingdom_region_titles
			check_de_jure_liege_kingdom_effect = yes
		}
	}
	scope:old_liege = {
		if = {
			limit = {
				NOT = {
					any_in_global_list = {
						variable = kingdom_region_list
						this.var:kingdom_region_empire = scope:old_liege
					}
				}
			}
			destroy_title = THIS
		}
	}
}

set_kingdom_region_de_jure_liege_tooltip_only_effect = {
	$REGION_BASE$ = { save_scope_as = kingdom_region_empire_pretend }
	$NEW_DE_JURE_LIEGE$ = { save_scope_as = kingdom_region_empire_pretend_target }
	$REGION_BASE$ = {
		save_scope_as = region_base_title
		every_in_list = {
			variable = kingdom_region_titles
			show_as_tooltip = {
				check_de_jure_liege_kingdom_effect = yes
			}
		}
		this.var:kingdom_region_empire = {
			if = {
				limit = {
					NOT = {
						any_in_global_list = {
							variable = kingdom_region_list
							this.var:kingdom_region_empire = prev
							NOT = { this = scope:region_base_title }
						}
					}
				}
				show_as_tooltip = { destroy_title = THIS }
			}
		}
	}
}

set_title_integrated_flag_effect = {
	$FLAG_VALUE$ = { save_temporary_scope_as = new_liege }
	if = {
		limit = { $SHIFT_TYPE$ = flag:integration }
		set_variable = {
			name = integrated_kingdom
			value = $FLAG_VALUE$
		}
	}
	# Find any integration entry for the new liege in the current title's formable_and_expansion_liege_title_shifts 
	# list and move it to the end
	every_in_list = {
		variable = formable_and_expansion_liege_title_shifts
		limit = {
			this.var:liege_title = scope:new_liege
			this.var:shift_type = $SHIFT_TYPE$
		}
		save_temporary_scope_as = current_new_liege_de_jure_shift_struct
		prev = { 
			remove_list_variable = {
				name = formable_and_expansion_liege_title_shifts
				target = scope:current_new_liege_de_jure_shift_struct
			}
			add_to_variable_list = {
				name = formable_and_expansion_liege_title_shifts
				target = scope:current_new_liege_de_jure_shift_struct
			}
		}
	}
}

# Scope is the kingdom to set as formed or expanded
# SHIFT_TYPE should be a flag that is one of formable/expanded/expanded_alt
set_formable_or_expandable_liege_title_flag_effect = {
	if = {
		limit = { $SHIFT_TYPE$ = flag:formable }
		set_variable = title_created_de_jure
	}
	else_if = {
		limit = { $SHIFT_TYPE$ = flag:expanded }
		set_variable = title_expanded_de_jure
	}
	else_if = {
		limit = { $SHIFT_TYPE$ = flag:expanded_alt }
		set_variable = title_expanded_alt_de_jure
	}
	save_temporary_scope_as = current_title
	if = {
		limit = {
			has_variable_list = de_jure_affected_territory
		}
		every_in_list = {
			variable = de_jure_affected_territory
			limit = {
				has_variable_list = formable_and_expansion_liege_title_shifts
			}
			# Find any formation entry for the scoped kingdom in the duchy's formable_and_expansion_liege_title_shifts list
			# and move it to the end
			every_in_list = {
				variable = formable_and_expansion_liege_title_shifts
				limit = {
					this.var:liege_title = scope:current_title
					this.var:shift_type = $SHIFT_TYPE$
				}
				save_temporary_scope_as = current_title_de_jure_shift_struct
				prev = { 
					remove_list_variable = {
						name = formable_and_expansion_liege_title_shifts
						target = scope:current_title_de_jure_shift_struct
					}
					add_to_variable_list = {
						name = formable_and_expansion_liege_title_shifts
						target = scope:current_title_de_jure_shift_struct
					}
				}
			}
		}
	}
}

set_duchy_integrated_effect = {
	set_title_integrated_flag_effect = {
		SHIFT_TYPE = flag:integration
		FLAG_VALUE = $INTEGRATION_KINGDOM$
	}
}

set_kingdom_formed_effect = {
	set_formable_or_expandable_liege_title_flag_effect = { SHIFT_TYPE = flag:formable }
}

set_kingdom_expanded_effect = {
	set_formable_or_expandable_liege_title_flag_effect = { SHIFT_TYPE = flag:expanded }
}

set_kingdom_expanded_alt_effect = {
	set_formable_or_expandable_liege_title_flag_effect = { SHIFT_TYPE = flag:expanded_alt }
}

# Requires that scope:story_holder be set to any arbitrary character
set_dependent_expansion_effect = {
	$NEW_LIEGE$ = { save_temporary_scope_as = new_liege }
	$DEPENDENT_TITLE$ = { save_temporary_scope_as = dependent_title }
	scope:story_holder = {
		create_story = {
			type = dependent_expansion_struct_story
			save_temporary_scope_as = new_dependent_expansion_struct_story
		}
	}
	scope:new_dependent_expansion_struct_story = {
		set_variable = { name = new_liege value = scope:new_liege }
		set_variable = { name = dependent_title value = scope:dependent_title }
		set_variable = { name = dependent_title_flag value = $DEPENDENT_TITLE_FLAG$ }
	}
	set_variable = { name = dependent_expansion value = scope:new_dependent_expansion_struct_story }
}

check_de_jure_liege_county_effect = {
	if = {
		limit = {
			has_variable = norse_duchy
			this.var:norse_duchy = { title_has_de_jure_variable_trigger = { FLAG = title_created_de_jure } }
		}
		# This check is for tooltip purposes
		if = {
			limit = { NOT = { de_jure_liege = this.var:norse_duchy } }
			set_de_jure_liege_title = this.var:norse_duchy
		}
	}
	else_if = {
		limit = {
			has_variable = anglo_saxon_duchy
			this.var:anglo_saxon_duchy = {
				title_has_de_jure_variable_trigger = { FLAG = title_created_de_jure } 
			}
			OR = {
				# If the anglo_saxon_duchy_dependency title has been set, it must also exist
				# in order for the county to come under anglo_saxon_duchy
				NOT = { has_variable = anglo_saxon_duchy_dependency }
				this.var:anglo_saxon_duchy_dependency = { 
					title_has_de_jure_variable_trigger = { FLAG = title_created_de_jure } 
				}
			}
		}
		if = {
			limit = { NOT = { de_jure_liege = this.var:anglo_saxon_duchy } }
			set_de_jure_liege_title = this.var:anglo_saxon_duchy
		}
	}
	else_if = {
		limit = {
			has_variable = secondary_anglo_saxon_duchy
			this.var:secondary_anglo_saxon_duchy = { 
				title_has_de_jure_variable_trigger = { FLAG = title_created_de_jure } 
			}
		}
		if = {
			limit = { NOT = { de_jure_liege = this.var:secondary_anglo_saxon_duchy } }
			set_de_jure_liege_title = this.var:secondary_anglo_saxon_duchy
		}
	}
	else_if = {
		limit = {
			has_variable = roman_duchy
			this.var:roman_duchy = { 
				title_has_de_jure_variable_trigger = { FLAG = roman_title_created_de_jure } 
			}
		}
		if = {
			limit = { NOT = { de_jure_liege = this.var:roman_duchy } }
			set_de_jure_liege_title = this.var:roman_duchy
		}
	}
	else_if = {
		limit = {
			has_variable = dependent_expansion
			this.var:dependent_expansion = {
				OR = {
					AND = {
						this.var:dependent_title_flag = flag:formable
						this.var:dependent_title = { title_has_de_jure_variable_trigger = { FLAG = title_created_de_jure } }
					}
					AND = {
						this.var:dependent_title_flag = flag:expansion
						this.var:dependent_title = { title_has_de_jure_variable_trigger = { FLAG = title_expanded_de_jure } }
					}
					AND = {
						this.var:dependent_title_flag = flag:expansion_alt
						this.var:dependent_title = { title_has_de_jure_variable_trigger = { FLAG = title_expanded_alt_de_jure } }
					}
				}
			}
		}
		if = {
			limit = { NOT = { de_jure_liege = this.var:dependent_expansion.var:new_liege } }
			set_de_jure_liege_title = this.var:dependent_expansion.var:new_liege
		}
	}
	else = {
		if = {
			limit = { NOT = { de_jure_liege = this.var:default_duchy } }
			set_de_jure_liege_title = this.var:default_duchy
		}
	}
}

check_de_jure_liege_duchy_effect = {
	save_temporary_scope_as = current_duchy
	if = {
		limit = {
			title_has_de_jure_variable_trigger = { FLAG = roman_title_created_de_jure }
			has_variable = roman_kingdom
		}
		if = {
			limit = { NOT = { de_jure_liege = this.var:roman_kingdom } }
			set_de_jure_liege_title = this.var:roman_kingdom
		}
		set_roman_duchy_name_effect = yes
		if = {
			limit = { has_variable = roman_title_capital }
			hidden_effect = { set_capital_county = this.var:roman_title_capital }
		}
	}
	# No tooltip bypass/ignore for now as this is a bit more complicated
	else_if = {
		limit = {
			has_variable = integration_kingdom
			is_target_in_variable_list = { 
				name = potential_integration_kingdoms
				target = this.var:integration_kingdom
			}
		}
		if = {
			limit = { NOT = { de_jure_liege = this.var:integration_kingdom } }
			set_de_jure_liege_title = this.var:integration_kingdom
		}
	}
	# In the case of the formable_and_expansion_liege_title_shifts list, the normal tooltipping doesn't *quite* work in case of
	# overlapping titles as the newest formed/expanded title gets moved to the end of the list, which won't be caught
	# by the usual methods
	# So instead we grant higher priority to any title that induces a de jure shift by the tooltip-creating scopes
	else_if = {
		limit = {
			has_variable_list = formable_and_expansion_liege_title_shifts
			any_in_list = {
				variable = formable_and_expansion_liege_title_shifts
				OR = {
					AND = {
						this.var:shift_type = flag:integration
						scope:current_duchy = {
							title_has_de_jure_variable_with_scope_value_tooltip_trigger = {
								FLAG = integrated_kingdom
								FLAG_VALUE = prev.var:liege_title
							} 
						}
					}
					AND = {
						this.var:shift_type = flag:formable
						this.var:liege_title = { title_has_de_jure_variable_tooltip_trigger = { FLAG = title_created_de_jure } }
					}
					AND = {
						this.var:shift_type = flag:expansion
						this.var:liege_title = { title_has_de_jure_variable_tooltip_trigger = { FLAG = title_expanded_de_jure } }
					}
					AND = {
						this.var:shift_type = flag:expansion_alt
						this.var:liege_title = { title_has_de_jure_variable_tooltip_trigger = { FLAG = title_expanded_alt_de_jure } }
					}
				}
			}
		}
		ordered_in_list = {
			variable = formable_and_expansion_liege_title_shifts
			limit = {
				OR = {
					AND = {
						this.var:shift_type = flag:integration
						scope:current_duchy = {
							title_has_de_jure_variable_with_scope_value_tooltip_trigger = {
								FLAG = integrated_kingdom
								FLAG_VALUE = prev.var:liege_title
							} 
						}
					}
					AND = {
						this.var:shift_type = flag:formable
						this.var:liege_title = { title_has_de_jure_variable_tooltip_trigger = { FLAG = title_created_de_jure } }
					}
					AND = {
						this.var:shift_type = flag:expansion
						this.var:liege_title = { title_has_de_jure_variable_tooltip_trigger = { FLAG = title_expanded_de_jure } }
					}
					AND = {
						this.var:shift_type = flag:expansion_alt
						this.var:liege_title = { title_has_de_jure_variable_tooltip_trigger = { FLAG = title_expanded_alt_de_jure } }
					}
				}
			}
			position = {
				value = variable_list_size:formable_and_expansion_liege_title_shifts
				subtract = 1
			}
			this.var:liege_title = { save_temporary_scope_as = new_de_jure_liege }
		}
		if = {
			limit = { NOT = { de_jure_liege = scope:new_de_jure_liege } }
			set_de_jure_liege_title = scope:new_de_jure_liege
		}
	}
	else_if = {
		limit = {
			has_variable_list = formable_and_expansion_liege_title_shifts
			any_in_list = {
				variable = formable_and_expansion_liege_title_shifts
				OR = {
					# Duchies are integrated individually
					AND = {
						this.var:shift_type = flag:integration
						scope:current_duchy = {
							title_has_de_jure_variable_with_scope_value_trigger = {
								FLAG = integrated_kingdom
								FLAG_VALUE = prev.var:liege_title
							} 
						}
					}
					# For formations/expansions, a single flag on the kingdom shifts all the duchies
					AND = {
						this.var:shift_type = flag:formable
						this.var:liege_title = { title_has_de_jure_variable_trigger = { FLAG = title_created_de_jure } }
					}
					AND = {
						this.var:shift_type = flag:expansion
						this.var:liege_title = { title_has_de_jure_variable_trigger = { FLAG = title_expanded_de_jure } }
					}
					# Used for if a kingdom has multiple possible expansions it can get that are not covered by a
					# more systematic framework
					AND = {
						this.var:shift_type = flag:expansion_alt
						this.var:liege_title = { title_has_de_jure_variable_trigger = { FLAG = title_expanded_alt_de_jure } }
					}
				}
			}
		}
		ordered_in_list = {
			variable = formable_and_expansion_liege_title_shifts
			limit = {
				OR = {
					AND = {
						this.var:shift_type = flag:integration
						scope:current_duchy = {
							title_has_de_jure_variable_with_scope_value_trigger = {
								FLAG = integrated_kingdom
								FLAG_VALUE = prev.var:liege_title
							} 
						}
					}
					AND = {
						this.var:shift_type = flag:formable
						this.var:liege_title = { title_has_de_jure_variable_trigger = { FLAG = title_created_de_jure } }
					}
					AND = {
						this.var:shift_type = flag:expansion
						this.var:liege_title = { title_has_de_jure_variable_trigger = { FLAG = title_expanded_de_jure } }
					}
					AND = {
						this.var:shift_type = flag:expansion_alt
						this.var:liege_title = { title_has_de_jure_variable_trigger = { FLAG = title_expanded_alt_de_jure } }
					}
				}
			}
			position = {
				value = variable_list_size:formable_and_expansion_liege_title_shifts
				subtract = 1
			}
			this.var:liege_title = { save_temporary_scope_as = new_de_jure_liege }
		}
		if = {
			limit = { NOT = { de_jure_liege = scope:new_de_jure_liege } }
			set_de_jure_liege_title = scope:new_de_jure_liege
		}
	}
	# else_if = {
		# limit = {
			# has_variable_list = expansion_kingdoms
			# any_in_list = {
				# variable = expansion_kingdoms
				# title_has_de_jure_variable_trigger = { FLAG = title_expanded_de_jure }
			# }
		# }
		# ordered_in_list = {
			# variable = expansion_kingdoms
			# limit = { title_has_de_jure_variable_trigger = { FLAG = title_expanded_de_jure } }
			# position = 0
			# save_temporary_scope_as = new_de_jure_liege
		# }
		# if = {
			# limit = { NOT = { de_jure_liege = scope:new_de_jure_liege } }
			# set_de_jure_liege_title = scope:new_de_jure_liege
		# }
	# }
	# # Used for if a kingdom has multiple possible expansions it can get that are not covered by a
	# # more systematic framework
	# else_if = {
		# limit = {
			# has_variable_list = expansion_alt_kingdoms
			# any_in_list = {
				# variable = expansion_alt_kingdoms
				# title_has_de_jure_variable_trigger = { FLAG = title_expanded_alt_de_jure }
			# }
		# }
		# ordered_in_list = {
			# variable = expansion_alt_kingdoms
			# limit = { title_has_de_jure_variable_trigger = { FLAG = title_expanded_alt_de_jure } }
			# position = 0
			# save_temporary_scope_as = new_de_jure_liege
		# }
		# if = {
			# limit = { NOT = { de_jure_liege = scope:new_de_jure_liege } }
			# set_de_jure_liege_title = scope:new_de_jure_liege
		# }
	# }
	# else_if = {
		# limit = {
			# has_variable_list = formable_kingdoms
			# any_in_list = {
				# variable = formable_kingdoms
				# title_has_de_jure_variable_trigger = { FLAG = title_created_de_jure }
			# }
		# }
		# ordered_in_list = {
			# variable = formable_kingdoms
			# limit = { title_has_de_jure_variable_trigger = { FLAG = title_created_de_jure } }
			# position = 0
			# save_temporary_scope_as = new_de_jure_liege
		# }
		# if = {
			# limit = { NOT = { de_jure_liege = scope:new_de_jure_liege } }
			# set_de_jure_liege_title = scope:new_de_jure_liege
		# }
	# }
	else = {
		if = {
			limit = { NOT = { de_jure_liege = this.var:default_kingdom } }		
			set_de_jure_liege_title = this.var:default_kingdom
		}
		if = {
			limit = { NOT = { has_variable = custom_name } }
			hidden_effect = { reset_title_name = yes }		# No way of checking if a custom name has been applied
		}
		if = {
			limit = { 
				NOT = { has_variable = custom_capital }
				NOT = { title_capital_county = this.var:default_capital }
			}
			set_capital_county = this.var:default_capital
		}
	}
	
	# Special rule for The Weald getting renamed to Sussex
	if = {
		limit = { 
			this = title:d_the_weald 
			NOT = { has_variable = custom_name }
		}
		if = {
			limit = { NOT = { de_jure_liege = title:k_sussex } }
			set_title_name = SUSSEX_duchy
		}
		else = {
			hidden_effect = { reset_title_name = yes }
		}
	}
}

check_de_jure_liege_kingdom_effect = {
	# Possibly obsolete, but may bring back if needed
	# if = {
		# limit = {
			# has_variable = expansion_empire_1
			# this.var:expansion_empire_1 = {
				# title_has_de_jure_variable_trigger = { FLAG = title_expanded_de_jure }
			# }
		# }
		# if = {
			# limit = { NOT = { de_jure_liege = this.var:expansion_empire_1 } }
			# set_de_jure_liege_title = this.var:expansion_empire_1
		# }
	# }
	# # Used for if a empire has multiple possible expansions it can get that are not covered by a
	# # more systematic framework
	# else_if = {
		# limit = {
			# has_variable = expansion_alt_empire_1
			# this.var:expansion_alt_empire_1 = {
				# title_has_de_jure_variable_trigger = { FLAG = title_expanded_alt_de_jure }
			# }
		# }
		# if = {
			# limit = { NOT = { de_jure_liege = this.var:expansion_alt_empire_1 } }
			# set_de_jure_liege_title = this.var:expansion_alt_empire_1
		# }
	# }
	# else_if = {
		# limit = {
			# has_variable = formable_empire_1
			# this.var:formable_empire_1 = {
				# title_has_de_jure_variable_trigger = { FLAG = title_created_de_jure }
			# }
		# }
		# if = {
			# limit = { NOT = { de_jure_liege = this.var:formable_empire_1 } }
			# set_de_jure_liege_title = this.var:formable_empire_1
		# }
	# }
	if = {
		limit = {
			has_variable = kingdom_region
			this.var:kingdom_region = {
				title_has_de_jure_variable_trigger = { FLAG = kingdom_region_empire }
			}
		}
		# Don't show tooltip if the kingdom is titular AND has no holder
		if = {
			limit = {
				OR = {
					exists = this.holder
					is_titular = no
				}
			}
			set_title_flagged_de_jure_liege_effect = {
				FLAG = kingdom_region_empire
				FLAG_SCOPE = this.var:kingdom_region
				NEW_DE_JURE_LIEGE = this.var:kingdom_region.var:kingdom_region_empire
			}
		}
		else = {
			hidden_effect = {
				set_title_flagged_de_jure_liege_effect = {
					FLAG = kingdom_region_empire
					FLAG_SCOPE = this.var:kingdom_region
					NEW_DE_JURE_LIEGE = this.var:kingdom_region.var:kingdom_region_empire
				}
			}
		}
	}
	else = {
		# Don't show tooltip if the kingdom is titular AND has no holder
		if = {
			limit = {
				OR = {
					exists = this.holder
					is_titular = no
				}
			}
			if = {
				limit = { NOT = { de_jure_liege = this.var:default_empire } }		
				set_de_jure_liege_title = this.var:default_empire
			}
			if = {
				limit = { NOT = { has_variable = custom_name } }
				hidden_effect = { reset_title_name = yes }		# No way of checking if a custom name has been applied
			}
			if = {
				limit = { NOT = { has_variable = custom_capital } }
				set_capital_county = this.var:default_capital
			}
		}
		else = {
			hidden_effect = {
				if = {
					limit = { NOT = { de_jure_liege = this.var:default_empire } }		
					set_de_jure_liege_title = this.var:default_empire
				}
				if = {
					limit = { NOT = { has_variable = custom_name } }
					hidden_effect = { reset_title_name = yes }		# No way of checking if a custom name has been applied
				}
				if = {
					limit = { NOT = { has_variable = custom_capital } }
					set_capital_county = this.var:default_capital
				}
			}
		}
	}
}

check_de_jure_liege_effect = {
	if = {
		limit = { tier = tier_county }
		check_de_jure_liege_county_effect = yes
	}
	else_if = {
		limit = { tier = tier_duchy }
		check_de_jure_liege_duchy_effect = yes
	}
	if = {
		limit = { tier = tier_kingdom }
		check_de_jure_liege_kingdom_effect = yes
	}
}

# If this is updated, the roman_name variable setup also needs to be updated!
set_roman_duchy_name_effect = {
	custom_description = {
		text = set_roman_duchy_name_effect
		## MAXIMA CAESARIENSIS
		if = {
			limit = { this = title:d_lundein }
			set_title_name = cn_londiniensia
		}
		else_if = {
			limit = { this = title:d_mincip }
			set_title_name = cn_catuvellaunia
		}
		else_if = {
			limit = { this = title:d_trinovantia }
			set_title_name = cn_trinovantia
		}
		else_if = {
			limit = { this = title:d_cantuaria }
			set_title_name = cn_cantiacia
		}
		else_if = {
			limit = { this = title:d_rhegin }
			set_title_name = cn_regnia
		}
		else_if = {
			limit = { this = title:d_eastdumnonia }
			set_title_name = cn_atrebatia
		}
		else_if = {
			limit = { this = title:d_the_belgae }
			set_title_name = cn_belgia
		}
		## FLAVIA CAESARIENSIS
		else_if = {
			limit = { this = title:d_lindum }
			set_title_name = cn_lindinensia
		}
		else_if = {
			limit = { this = title:d_the_fens }
			set_title_name = cn_durobrivensia
		}
		else_if = {
			limit = { this = title:d_went }
			set_title_name = cn_icenia
		}
		else_if = {
			limit = { this = title:d_eastgwent }
			set_title_name = cn_lactodorensia
		}
		else_if = {
			limit = { this = title:d_lerion }
			set_title_name = cn_corieltauvia
		}
		## BRITANNIA PRIMA
		else_if = {
			limit = { this = title:d_corinium }
			set_title_name = cn_dobunnia
		}
		else_if = {
			limit = { this = title:d_centgwent }
			set_title_name = cn_glevensia
		}
		else_if = {
			limit = { this = title:d_avalon }
			set_title_name = cn_lendeniensia
		}
		else_if = {
			limit = { this = title:d_centdumnonia }
			set_title_name = cn_durotrigia
		}
		else_if = {
			limit = { this = title:d_westdumnonia }
			set_title_name = cn_dumnonia
		}
		else_if = {
			limit = { this = title:d_kernow }
			set_title_name = cn_cornubia
		}
		else_if = {
			limit = { this = title:d_gwent }
			set_title_name = cn_siluria
		}
		else_if = {
			limit = { this = title:d_deheubarth }
			set_title_name = cn_demetia
		}
		else_if = {
			limit = { this = title:d_eastpowys }
			set_title_name = cn_cornovia
		}
		else_if = {
			limit = { this = title:d_luitcoyt }
			set_title_name = cn_letocetensia
		}
		else_if = {
			limit = { this = title:d_deva }
			set_title_name = cn_devensia
		}
		else_if = {
			limit = { this = title:d_arfon }
			set_title_name = cn_venedotia
		}
		## BRITANNIA SECUNDA
		else_if = {
			limit = { this = title:d_ebrauc }
			set_title_name = cn_brigantia
		}
		else_if = {
			limit = { this = title:d_deifr }
			set_title_name = cn_parisia
		}
		else_if = {
			limit = { this = title:d_the_peak }
			set_title_name = cn_lutudarensia
		}
		else_if = {
			limit = { this = title:d_argoed }
			set_title_name = cn_setantia
		}
		## VALENTIA
		else_if = {
			limit = { this = title:d_westrheged }
			set_title_name = cn_carvetia
		}
		else_if = {
			limit = { this = title:d_eastrheged }
			set_title_name = cn_textoverdia
		}
		else_if = {
			limit = { this = title:d_bryneich }
			set_title_name = cn_bremenensia
		}
		else_if = {
			limit = { this = title:d_eidyn }
			set_title_name = cn_votadinia
		}
		else_if = {
			limit = { this = title:d_selgovae }
			set_title_name = cn_selgovia
		}
		else_if = {
			limit = { this = title:d_strathclyde }
			set_title_name = cn_damnonia
		}
		else_if = {
			limit = { this = title:d_galloway }
			set_title_name = cn_novantia
		}
		else_if = {
			limit = { this = title:d_ynys_man }
			set_title_name = cn_monapia
		}
		# TO BE CALEDONIA
		else_if = {
			limit = { this = title:d_manaw }
			set_title_name = cn_maeatia
		}
		else_if = {
			limit = { this = title:d_lennox }
			set_title_name = cn_attacottia
		}
	}
}

set_capital_county_w_tooltip_effect = {
	custom_description = {
		text = set_capital_county_w_tooltip_effect
		subject = THIS
		object = $CAPITAL$
		set_capital_county = $CAPITAL$
	}
}