namespace = name_lists
# namespace = tradition_switching
namespace = culture_shifts

##################################################
# Name List switching
##################################################

#Old Frisian -> Frisian
	
name_lists.001 = { #actual effect
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		current_year > 650
		this = culture:frisian
		NOT = { has_name_list = name_list_frisian }
	}	

	immediate = {
		every_culture_global = {
			limit = { has_name_list = name_list_oldfrisian }
			set_name_list = name_list_frisian
		}
		every_player = {
			limit = { 
				culture = { has_name_list = name_list_frisian }
			}
			trigger_event = { id = name_lists.002 }
		}
	}
}

name_lists.002 = { #visible event for Frisians
	type = character_event
	content_source = dlc_BTWK
	title = name_lists.002.t
	desc = name_lists.002.desc
	theme = culture_change	

	right_portrait = {
		character = root
		animation = idle
	}

	immediate = { #Switch name list loc
		custom_tooltip = name_lists.002.tt
	}

	option = {
		name = {
			text = name_lists.interesting
		}
	}
}


#Old Frankish -> Frankish
	
name_lists.003 = { #actual effect
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		current_year > 650
		this = culture:frankish
		NOT = { has_name_list = name_list_frankish }
	}	

	immediate = {
		every_culture_global = {
			limit = { has_name_list = name_list_oldfrankish }
			set_name_list = name_list_frankish
		}
		every_player = {
			limit = { 
				culture = { has_name_list = name_list_frankish }
			}
			trigger_event = { id = name_lists.004 }
		}
	}
}

name_lists.004 = { #visible event for Franks
	type = character_event
	content_source = dlc_BTWK
	title = name_lists.004.t
	desc = name_lists.004.desc
	theme = culture_change	

	right_portrait = {
		character = root
		animation = idle
	}

	immediate = { #Switch name list loc
		custom_tooltip = name_lists.004.tt
	}

	option = {
		name = {
			text = name_lists.interesting
		}
	}
}

#Old Alemannic -> Alemannic
	
name_lists.005 = { #actual effect
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		current_year > 750
		this = culture:alemannic
		NOT = { has_name_list = name_list_alemannic }
	}	

	immediate = {
		every_culture_global = {
			limit = { has_name_list = name_list_oldalemannic }
			set_name_list = name_list_alemannic
		}
		every_player = {
			limit = { 
				culture = { has_name_list = name_list_alemannic }
			}
			trigger_event = { id = name_lists.006 }
		}
	}
}

name_lists.006 = { #visible event for Alemannics
	type = character_event
	content_source = dlc_BTWK
	title = name_lists.006.t
	desc = name_lists.006.desc
	theme = culture_change	

	right_portrait = {
		character = root
		animation = idle
	}

	immediate = { #Switch name list loc
		custom_tooltip = name_lists.006.tt
	}

	option = {
		name = {
			text = name_lists.interesting
		}
	}
}

#Old Bavarian -> Bavarian
	
name_lists.007 = { #actual effect
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		current_year > 750
		this = culture:bavarian
		NOT = { has_name_list = name_list_bavarian }
	}	

	immediate = {
		every_culture_global = {
			limit = { has_name_list = name_list_oldbavarian }
			set_name_list = name_list_bavarian
		}
		every_player = {
			limit = { 
				culture = { has_name_list = name_list_bavarian }
			}
			trigger_event = { id = name_lists.008 }
		}
	}
}

name_lists.008 = { #visible event for Bavarians
	type = character_event
	content_source = dlc_BTWK
	title = name_lists.008.t
	desc = name_lists.008.desc
	theme = culture_change	

	right_portrait = {
		character = root
		animation = idle
	}

	immediate = { #Switch name list loc
		custom_tooltip = name_lists.008.tt
	}

	option = {
		name = {
			text = name_lists.interesting
		}
	}
}


#Old Thuringian -> Thuringian
	
name_lists.009 = { #actual effect
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		current_year > 750
		this = culture:thuringian
		NOT = { has_name_list = name_list_thuringian }
	}	

	immediate = {
		every_culture_global = {
			limit = { has_name_list = name_list_oldthuringian }
			set_name_list = name_list_thuringian
		}
		every_player = {
			limit = { 
				culture = { has_name_list = name_list_thuringian }
			}
			trigger_event = { id = name_lists.010 }
		}
	}
}

name_lists.010 = { #visible event for Thuringians
	type = character_event
	content_source = dlc_BTWK
	title = name_lists.010.t
	desc = name_lists.010.desc
	theme = culture_change	

	right_portrait = {
		character = root
		animation = idle
	}

	immediate = { #Switch name list loc
		custom_tooltip = name_lists.010.tt
	}

	option = {
		name = {
			text = name_lists.interesting
		}
	}
}

#Old Norse -> Norse
	
name_lists.011 = { #actual effect
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		current_year > 750
		this = culture:norse
		NOT = { has_name_list = name_list_norse }
	}	

	immediate = {
		every_culture_global = {
			limit = { has_name_list = name_list_proto_norse }
			set_name_list = name_list_norse
		}
		every_player = {
			limit = { 
				culture = { has_name_list = name_list_norse }
			}
			trigger_event = { id = name_lists.012 }
		}
	}
}

name_lists.012 = { #visible event for Norsemen
	type = character_event
	content_source = dlc_BTWK
	title = name_lists.012.t
	desc = name_lists.012.desc
	theme = culture_change	

	right_portrait = {
		character = root
		animation = idle
	}

	immediate = { #Switch name list loc
		custom_tooltip = name_lists.012.tt
	}

	option = {
		name = {
			text = name_lists.interesting
		}
	}
}

##################################################
# Culture shifts
##################################################

# Breakup of Briton and Armorican shift to Breton - called by the Fall of Britannia event
culture_shifts.0001 = {
	scope = none
	content_source = dlc_BTWK
	hidden = yes
	
	immediate = {
		# Break up Briton culture
		culture:welsh = {
			# 'Diverge' this culture by copying innovations. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:briton
			save_scope_as = welsh
		}
		culture:cumbrian = {
			# 'Diverge' this culture by copying innovations. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:briton
			save_scope_as = cumbrian
		}
		culture:cornish = {
			# 'Diverge' this culture by copying innovations. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:briton
			save_scope_as = cornish
		}
		culture:briton = {
			save_scope_as = briton
			# Convert counties based on region
			every_culture_county = {
				title_province = { get_briton_successor_culture_for_province_effect = yes }
				set_county_culture = scope:briton_successor_culture
			}
			# Convert unlanded family based on region of capital
			every_ruler = {
				limit = { culture = culture:briton }
				capital_province = {
					get_briton_successor_culture_for_province_effect = yes
				}
				every_close_family_member = {
					limit = { 
						is_landed = no 			# Includes courtiers and landless rulers!
						culture = culture:briton
					}
					if = {
						limit = {
							exists = domicile.domicile_culture
							culture = domicile.domicile_culture
						}
						domicile = { set_domicile_culture = scope:briton_successor_culture }
					}
					set_culture = scope:briton_successor_culture
				}
			}
			# Then convert rulers + courts - do this second so that family members in other courts
			# match the culture of their family
			every_ruler = {
				limit = { culture = culture:briton }
				capital_province = {
					get_briton_successor_culture_for_province_effect = yes
				}
				set_culture = scope:briton_successor_culture
				every_courtier_or_guest = {
					limit = {
						culture = culture:briton
					}
					if = {
						limit = {
							exists = domicile.domicile_culture
							culture = domicile.domicile_culture
						}
						domicile = { set_domicile_culture = scope:briton_successor_culture }
					}
					set_culture = scope:briton_successor_culture
				}
			}
			# Convert any remaining adventurer camps
			every_domicile = {
				limit = { owner.culture = culture:briton }
				domicile_location = { get_briton_successor_culture_for_province_effect = yes }
				owner = {
					if = {
						limit = {
							exists = domicile.domicile_culture
							culture = domicile.domicile_culture
						}
						domicile = { set_domicile_culture = scope:briton_successor_culture }
					}
					set_culture = scope:briton_successor_culture
					every_courtier_or_guest = {
						limit = {
							culture = culture:briton
						}
						if = {
							limit = {
								exists = domicile.domicile_culture
								culture = domicile.domicile_culture
							}
							domicile = { set_domicile_culture = scope:briton_successor_culture }
						}
						set_culture = scope:briton_successor_culture
					}
				}
			}
			# Then convert straggler characters (mostly random courtiers or distant relatives)
			every_living_character = {
				limit = { culture = culture:briton }
				location = { get_briton_successor_culture_for_province_effect = yes }
				if = {
					limit = {
						exists = domicile.domicile_culture
						culture = domicile.domicile_culture
					}
					domicile = { set_domicile_culture = scope:briton_successor_culture }
				}
				set_culture = scope:briton_successor_culture
			}
		}
		
		# Armorican becomes Breton
		culture:breton = {
			# 'Diverge' this culture by copying innovations. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:armorican
			save_scope_as = breton
		}
		culture:armorican = {
			save_scope_as = armorican
			every_culture_county = {
				set_county_culture = culture:breton
			}
		}
		every_living_character = {
			limit = { culture = culture:armorican }
			set_culture = culture:breton
			if = {
				limit = {
					exists = domicile.domicile_culture
					culture = domicile.domicile_culture
				}
				domicile = { set_domicile_culture = culture:breton }
			}
		}
	}
}

# Anglo-Saxon regional/kingdom culture emergence
culture_shifts.0002 = {
	scope = none
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		any_in_global_list = {
			variable = anglo_saxon_heptarchy_kingdom_list
			NOT = { has_variable = anglo_saxon_regional_culture }
		}
	}
	
	immediate = {
		every_in_global_list = {
			variable = anglo_saxon_heptarchy_kingdom_list
			limit = { NOT = { has_variable = anglo_saxon_regional_culture } }
			
			save_scope_as = current_kingdom
			if = {
				limit = { NOT = { has_variable = regional_culture_progress_change } }
				set_variable = { name = regional_culture_progress_change value = 0 }
			}
			if = {
				limit = { exists = this.holder }
				# Each kingdom gets yearly progress towards the emergence of the associated culture
				# if the kingdom title exists
				change_variable = { name = regional_culture_progress_change add = 2 }
				# Greater if the holder is not tribal
				if = {
					limit = { this.holder = { NOT = { government_has_flag = government_is_tribal } } }
					change_variable = { name = regional_culture_progress_change add = 1 }
				}
				# Less if it's not the holder's primary title
				if = {
					limit = { 
						NOT = { this.holder.primary_title = this }
						NAND = {
							this.holder = { has_title = title:e_aengland }
							title:e_aengland.var:aengland_primary_kingdom = this
						}
					}
					change_variable = { name = regional_culture_progress_change multiply = 0.67 }
				}
			}
			
			# Get a small amount of progress if any other regional cultures already exist,
			# even if the kingdom title doesn't actually exist yet
			# But only for kingdoms with a minimum number of West Germanic non-regional culture provinces
			
			# Capped at 60% progress before the consolidation/unification phase
			
			# If you reach 100% progress, then the new culture is created	
			if = {
				limit = {
					this.var:regional_culture_progress >= 100
					OR = {
						NOT = { exists = struggle:britannia_struggle }
						struggle:britannia_struggle = { is_struggle_phase = struggle_britannia_phase_consolidation }
						struggle:britannia_struggle = { is_struggle_phase = struggle_britannia_phase_unification }	
					}
				}				
				# If the kingdom has a holder, than diverge from the holder's culture
				# Unless they are already a regional culture
				if = {
					limit = { 
						exists = this.holder
						NOT = { culture = { has_variable = is_anglo_saxon_regional_culture } }
					}
					this.holder.culture = { save_scope_as = old_culture }
				}
				
				# Otherwise, take the most common non-regional West Germanic culture in the kingdom
				# Also needed if the holder is not West Germanic - we're creating a hybrid then
				if = {
					limit = {
						OR = {
							NOT = { exists = scope:old_culture }
							scope:old_culture = { NOT = { has_cultural_pillar = heritage_west_germanic } }
						}
					}
					set_local_variable = { name = most_common_culture_size value = 0 }
					every_culture_global = {
						limit = { 
							has_cultural_pillar = heritage_west_germanic
							NOT = { has_variable = is_anglo_saxon_regional_culture }
						}
						set_local_variable = { name = num_culture_provinces value = 0 }
						every_culture_county = {
							limit = { this.var:anglo_saxon_duchy.kingdom = scope:current_kingdom }
							change_local_variable = { name = num_culture_provinces add = 1 }
						}
						# Special rule: Jutish counts for 1.5x in Kent
						if = {
							limit = { 
								scope:current_kingdom = title:k_cantia
								this = { culture_is_culture_or_descendant_trigger = { CULTURE = culture:jute } }
							}
							change_local_variable = { name = num_culture_provinces multiply = 1.5 }
						}
						if = {
							limit = { local_var:num_culture_provinces > local_var:most_common_culture_size }
							set_local_variable = { 
								name = most_common_culture_size
								value = local_var:num_culture_provinces
							}
							save_scope_as = dominant_west_germanic_culture
						}
					}
					# If somehow there is no most common culture, default to the historical
					if = {
						limit = { NOT = { exists = scope:dominant_west_germanic_culture } }
						if = {
							limit = {
								OR = {
									this = title:k_eastseaxe
									this = title:k_sussex
									AND = {
										this = title:k_wessex
										NOT = { has_variable = jutish_wessex }
									}
								}
							}
							culture:old_saxon = { save_scope_as = dominant_west_germanic_culture }
						}
						else_if = {
							limit = {
								OR = {
									this = title:k_cantia
									AND = {
										this = title:k_wessex
										has_variable = jutish_wessex
									}
								}
							}
							culture:jute = { save_scope_as = dominant_west_germanic_culture }
						}
						else = {
							culture:old_saxon = { save_scope_as = dominant_west_germanic_culture }
						}
					}
				}
				if = {
					limit = { NOT = { exists = scope:old_culture } }
					scope:dominant_west_germanic_culture = { save_scope_as = old_culture }
				}
				
				# Since divergent culture colours are awkward, we script the historical options,
				# and only create new cultures when necessary
				if = {
					limit = {
						this = title:k_east_anglia
						scope:old_culture = culture:angle
					}
					culture:east_anglian = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
					}
				}
				else_if = {
					limit = {
						this = title:k_mercia
						scope:old_culture = culture:angle
					}
					culture:mercian = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
					}
				}
				else_if = {
					limit = {
						this = title:k_northumbria
						scope:old_culture = culture:angle
					}
					culture:northumbrian = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
					}
				}
				else_if = {
					limit = {
						this = title:k_eastseaxe
						scope:old_culture = culture:old_saxon
					}
					culture:east_saxon = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
					}
				}
				else_if = {
					limit = {
						this = title:k_sussex
						scope:old_culture = culture:old_saxon
					}
					culture:south_saxon = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
					}
				}
				else_if = {
					limit = {
						this = title:k_wessex
						scope:old_culture = culture:old_saxon
					}
					culture:west_saxon = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
					}
				}
				else_if = {
					limit = {
						this = title:k_cantia
						scope:old_culture = culture:jute
					}
					culture:kentish = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
					}
				}
				# Fallback - make the new divergent culture (the colour will be bad, nothing we can do about it)
				# Ideally we wouldn't have to do this, but we can't change culture colour or parents, so...
				else = {
					# TODO Override the culture creation on action to not give the usual event here,
					# since we want to have our own message
					if = {
						limit = { scope:old_culture = { has_cultural_pillar = heritage_west_germanic } }
						create_character = {
							dynasty = none
							location = this.title_capital_county.title_province
							culture = scope:old_culture
							faith = faith:anglo_saxon_pagan
							gender = male
							save_scope_as = culture_creator
						}
						scope:culture_creator = {
							create_divergent_culture = yes
							death = natural
						}
					}
					else = {
						create_character = {
							dynasty = none
							location = this.title_capital_county.title_province
							culture = scope:dominant_west_germanic_culture
							faith = faith:anglo_saxon_pagan
							gender = male
							save_scope_as = culture_creator
						}
						scope:culture_creator = {
							create_hybrid_culture = scope:old_culture
							death = natural
						}				
						scope:new_culture = {
							set_heritage_from = scope:dominant_west_germanic_culture
							set_language_from = scope:dominant_west_germanic_culture
							# Name list will be both but the West Germanic culture first, which is okay
						}		
					}
					
					# Set the proper name
					if = {
						limit = {
							this = title:k_wessex
							OR = {
								has_variable = jutish_wessex
								AND = {
									NOT = { has_variable = title_has_been_created }
									OR = {
										scope:old_culture = culture:jute
										AND = {
											NOT = { scope:old_culture = { has_cultural_pillar = heritage_west_germanic } }
											scope:dominant_west_germanic_culture = culture:jute
										}
									}
								}
							}
						}
						scope:new_culture = {
							set_culture_name = {
								noun = west_jutish
								collective_noun = west_jutish_collective_noun
								prefix = west_jutish_prefix
							}
						}
						# Rename Jutish Wessex to Westeotas ("West Jutes") if it has not yet been created
						if = {
							limit = { NOT = { has_variable = title_has_been_created } }
							set_variable = jutish_wessex
							title:k_wessex = {
								set_title_name = WESTEOTAS
								set_capital_county = title:c_clausentum
								set_variable = jutish_wessex
							}
						}
					}
					else = {
						scope:new_culture = {
							set_culture_name = {
								noun = anglo_saxon_regional_culture_noun
								collective_noun = anglo_saxon_regional_culture_collective_noun
								prefix = anglo_saxon_regional_culture_noun		# Placeholder
							}
						}
					}
				}
				set_variable = { name = anglo_saxon_regional_culture value = scope:new_culture }
				scope:new_culture = {
					set_variable = { name = anglo_saxon_regional_culture_kingdom value = scope:current_kingdom }
				}
				
				# Convert characters/provinces
				this.holder = { 
					set_culture = scope:new_culture
					every_close_family_member = {
						limit = {
							OR = {
								is_landed = no 			# Includes courtiers and landless rulers!
								highest_held_title_tier = tier_barony
							}
							is_ai = yes
							save_temporary_scope_as = current_char_culture
							scope:new_culture = { any_parent_culture = { this = scope:current_char_culture } }
						}
						set_culture = scope:new_culture
					}
					capital_county = { set_county_culture = scope:new_culture }
				}
				# For testing
				# title_capital_county = { set_county_culture = scope:new_culture }
				
				# Clear scopes in case multiple kingdoms trigger
				clear_saved_scope = old_culture
				clear_saved_scope = new_culture
				clear_saved_scope = dominant_west_germanic_culture
			}
		}
	}
}