namespace = name_lists
# namespace = tradition_switching
namespace = culture_shifts

##################################################
# Name List switching
##################################################

#Old Frisian -> Frisian
	
name_lists.001 = { #actual effect
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		current_year > 650
		this = culture:frisian
		NOT = { has_name_list = name_list_frisian }
	}	

	immediate = {
		every_culture_global = {
			limit = { has_name_list = name_list_oldfrisian }
			set_name_list = name_list_frisian
		}
		every_player = {
			limit = { 
				culture = { has_name_list = name_list_frisian }
			}
			trigger_event = { id = name_lists.002 }
		}
	}
}

name_lists.002 = { #visible event for Frisians
	type = character_event
	content_source = dlc_BTWK
	title = name_lists.002.t
	desc = name_lists.002.desc
	theme = culture_change	

	right_portrait = {
		character = root
		animation = idle
	}

	immediate = { #Switch name list loc
		custom_tooltip = name_lists.002.tt
	}

	option = {
		name = {
			text = name_lists.interesting
		}
	}
}


#Old Frankish -> Frankish
	
name_lists.003 = { #actual effect
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		current_year > 650
		this = culture:frankish
		NOT = { has_name_list = name_list_frankish }
	}	

	immediate = {
		every_culture_global = {
			limit = { has_name_list = name_list_oldfrankish }
			set_name_list = name_list_frankish
		}
		every_player = {
			limit = { 
				culture = { has_name_list = name_list_frankish }
			}
			trigger_event = { id = name_lists.004 }
		}
	}
}

name_lists.004 = { #visible event for Franks
	type = character_event
	content_source = dlc_BTWK
	title = name_lists.004.t
	desc = name_lists.004.desc
	theme = culture_change	

	right_portrait = {
		character = root
		animation = idle
	}

	immediate = { #Switch name list loc
		custom_tooltip = name_lists.004.tt
	}

	option = {
		name = {
			text = name_lists.interesting
		}
	}
}

#Old Alemannic -> Alemannic
	
name_lists.005 = { #actual effect
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		current_year > 750
		this = culture:alemannic
		NOT = { has_name_list = name_list_alemannic }
	}	

	immediate = {
		every_culture_global = {
			limit = { has_name_list = name_list_oldalemannic }
			set_name_list = name_list_alemannic
		}
		every_player = {
			limit = { 
				culture = { has_name_list = name_list_alemannic }
			}
			trigger_event = { id = name_lists.006 }
		}
	}
}

name_lists.006 = { #visible event for Alemannics
	type = character_event
	content_source = dlc_BTWK
	title = name_lists.006.t
	desc = name_lists.006.desc
	theme = culture_change	

	right_portrait = {
		character = root
		animation = idle
	}

	immediate = { #Switch name list loc
		custom_tooltip = name_lists.006.tt
	}

	option = {
		name = {
			text = name_lists.interesting
		}
	}
}

#Old Bavarian -> Bavarian
	
name_lists.007 = { #actual effect
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		current_year > 750
		this = culture:bavarian
		NOT = { has_name_list = name_list_bavarian }
	}	

	immediate = {
		every_culture_global = {
			limit = { has_name_list = name_list_oldbavarian }
			set_name_list = name_list_bavarian
		}
		every_player = {
			limit = { 
				culture = { has_name_list = name_list_bavarian }
			}
			trigger_event = { id = name_lists.008 }
		}
	}
}

name_lists.008 = { #visible event for Bavarians
	type = character_event
	content_source = dlc_BTWK
	title = name_lists.008.t
	desc = name_lists.008.desc
	theme = culture_change	

	right_portrait = {
		character = root
		animation = idle
	}

	immediate = { #Switch name list loc
		custom_tooltip = name_lists.008.tt
	}

	option = {
		name = {
			text = name_lists.interesting
		}
	}
}


#Old Thuringian -> Thuringian
	
name_lists.009 = { #actual effect
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		current_year > 750
		this = culture:thuringian
		NOT = { has_name_list = name_list_thuringian }
	}	

	immediate = {
		every_culture_global = {
			limit = { has_name_list = name_list_oldthuringian }
			set_name_list = name_list_thuringian
		}
		every_player = {
			limit = { 
				culture = { has_name_list = name_list_thuringian }
			}
			trigger_event = { id = name_lists.010 }
		}
	}
}

name_lists.010 = { #visible event for Thuringians
	type = character_event
	content_source = dlc_BTWK
	title = name_lists.010.t
	desc = name_lists.010.desc
	theme = culture_change	

	right_portrait = {
		character = root
		animation = idle
	}

	immediate = { #Switch name list loc
		custom_tooltip = name_lists.010.tt
	}

	option = {
		name = {
			text = name_lists.interesting
		}
	}
}

#Old Norse -> Norse
	
name_lists.011 = { #actual effect
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		current_year > 750
		this = culture:norse
		NOT = { has_name_list = name_list_norse }
	}	

	immediate = {
		every_culture_global = {
			limit = { has_name_list = name_list_proto_norse }
			set_name_list = name_list_norse
		}
		every_player = {
			limit = { 
				culture = { has_name_list = name_list_norse }
			}
			trigger_event = { id = name_lists.012 }
		}
	}
}

name_lists.012 = { #visible event for Norsemen
	type = character_event
	content_source = dlc_BTWK
	title = name_lists.012.t
	desc = name_lists.012.desc
	theme = culture_change	

	right_portrait = {
		character = root
		animation = idle
	}

	immediate = { #Switch name list loc
		custom_tooltip = name_lists.012.tt
	}

	option = {
		name = {
			text = name_lists.interesting
		}
	}
}

##################################################
# Culture shifts
##################################################

# 0001 - 0009	- Briton split
# 0010 - 0019	- Anglo-Saxon regional cultures
# 0020 - 0029	- Anglo-Saxon unified culture
# 0030 - 0039	- Romano-British Romance culture shift

# Breakup of Briton and Armorican shift to Breton - called and notified by the Fall of Britannia event
culture_shifts.0001 = {
	scope = none
	content_source = dlc_BTWK
	hidden = yes
	
	immediate = {
		# Break up Briton culture
		culture:welsh = {
			# 'Diverge' this culture by copying innovations. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:briton
			save_scope_as = welsh
		}
		culture:cumbrian = {
			# 'Diverge' this culture by copying innovations. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:briton
			save_scope_as = cumbrian
		}
		culture:cornish = {
			# 'Diverge' this culture by copying innovations. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:briton
			save_scope_as = cornish
		}
		culture:briton = {
			save_scope_as = briton
			# Convert counties based on region
			every_culture_county = {
				title_province = { get_briton_successor_culture_for_province_effect = yes }
				set_county_culture = scope:briton_successor_culture
			}
			# Convert unlanded family based on region of capital
			every_ruler = {
				limit = { culture = culture:briton }
				capital_province = {
					get_briton_successor_culture_for_province_effect = yes
				}
				convert_unlanded_close_family_members_of_culture_effect = {
					CULTURE_CONDITION_LHS = "culture"
					CULTURE_CONDITION_OP = "="
					CULTURE_CONDITION_RHS = "culture:briton"
					NEW_CULTURE = scope:briton_successor_culture
				}
			}
			# Then convert rulers + courts - do this second so that family members in other courts
			# match the culture of their family
			every_ruler = {
				limit = { culture = culture:briton }
				capital_province = {
					get_briton_successor_culture_for_province_effect = yes
				}
				set_culture = scope:briton_successor_culture
				convert_unlanded_courtiers_and_guests_of_culture_effect = {
					CULTURE_CONDITION_LHS = "culture"
					CULTURE_CONDITION_OP = "="
					CULTURE_CONDITION_RHS = "culture:briton"
					NEW_CULTURE = scope:briton_successor_culture
				}
			}
			# Convert any remaining adventurer camps
			every_domicile = {
				limit = { owner.culture = culture:briton }
				domicile_location = { get_briton_successor_culture_for_province_effect = yes }
				owner = {
					if = {
						limit = {
							exists = domicile.domicile_culture
							culture = domicile.domicile_culture
						}
						domicile = { set_domicile_culture = scope:briton_successor_culture }
					}
					set_culture = scope:briton_successor_culture
					convert_unlanded_courtiers_and_guests_of_culture_effect = {
						CULTURE_CONDITION_LHS = "culture"
						CULTURE_CONDITION_OP = "="
						CULTURE_CONDITION_RHS = "culture:briton"
						NEW_CULTURE = scope:briton_successor_culture
					}
				}
			}
			# Then convert straggler characters (mostly random courtiers or distant relatives)
			every_living_character = {
				limit = { culture = culture:briton }
				location = { get_briton_successor_culture_for_province_effect = yes }
				if = {
					limit = {
						exists = domicile.domicile_culture
						culture = domicile.domicile_culture
					}
					domicile = { set_domicile_culture = scope:briton_successor_culture }
				}
				set_culture = scope:briton_successor_culture
			}
		}
		
		# Armorican becomes Breton
		culture:breton = {
			# 'Diverge' this culture by copying innovations. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:armorican
			save_scope_as = breton
		}
		culture:armorican = {
			save_scope_as = armorican
			every_culture_county = {
				set_county_culture = culture:breton
			}
		}
		every_living_character = {
			limit = { culture = culture:armorican }
			set_culture = culture:breton
			if = {
				limit = {
					exists = domicile.domicile_culture
					culture = domicile.domicile_culture
				}
				domicile = { set_domicile_culture = culture:breton }
			}
		}
	}
}

### ANGLO-SAXON REGIONAL CULTURE EMERGENCE ###
# Anglo-Saxon regional/kingdom culture counter and emergence
culture_shifts.0010 = {
	scope = none
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		any_in_global_list = {
			variable = anglo_saxon_kingdom_list
			NOT = { has_variable = anglo_saxon_regional_culture }
		}
		# New regional cultures will no longer emerge once the unified Anglo-Saxon culture has been created
		NOT = { title:e_aengland = { has_variable = anglo_saxon_unified_culture } }
	}
	
	immediate = {
		every_in_global_list = {
			variable = anglo_saxon_kingdom_list
			limit = { NOT = { has_variable = anglo_saxon_regional_culture } }
			
			save_scope_as = current_kingdom
			if = {
				limit = { NOT = { has_variable = regional_culture_progress } }
				set_variable = { name = regional_culture_progress value = 0 }
			}
			
			set_variable = { name = regional_culture_progress_change value = 0 }
			if = {
				limit = { exists = this.holder }
				# Each kingdom gets yearly progress towards the emergence of the associated culture
				# if the kingdom title exists
				change_variable = { name = regional_culture_progress_change add = 2 }
				# Greater if the holder is not tribal
				if = {
					limit = { this.holder = { NOT = { government_has_flag = government_is_tribal } } }
					change_variable = { name = regional_culture_progress_change add = 1 }
				}
				# Less if it's not the holder's primary title
				if = {
					limit = { 
						NOT = { this.holder.primary_title = this }
						NAND = {
							this.holder = { has_title = title:e_aengland }
							title:e_aengland.var:aengland_primary_kingdom = this
						}
					}
					change_variable = { name = regional_culture_progress_change multiply = 0.67 }
				}
				# Less if the holder is not West Germanic and is not independent or under a West Germanic top liege
				if = {
					limit = { 
						NOT = { this.holder.culture = { has_cultural_pillar = heritage_west_germanic } }
						this.holder = {
							NOR = {
								is_independent_ruler = yes
								top_liege.culture = { has_cultural_pillar = heritage_west_germanic }
							}
						}
					}
					change_variable = { name = regional_culture_progress_change multiply = 0.67 }
				}
			}
			
			# Get a small amount of progress if any other regional cultures already exist,
			# even if the kingdom title doesn't actually exist yet
			if = {
				limit = {
					any_in_global_list = {
						variable = anglo_saxon_kingdom_list
						has_variable = anglo_saxon_regional_culture
					}
				}
				# But only for kingdoms with a minimum number of non-Romanized Germanic non-regional culture provinces
				set_local_variable = { name = num_non_regional_germanic_provinces value = 0 }
				every_direct_de_jure_vassal_title = {
					every_in_list = {
						variable = baseline_dynamic_de_jure_territory
						if = {
							limit = { 
								is_unromanized_germanic_culture_trigger = yes
								NOT = { culture = { has_variable = anglo_saxon_regional_culture_kingdom } }
								NOT = { culture = { has_variable = is_anglo_saxon_unified_culture } }
								# Westernian can only appear in Wales
								OR = {
									NOT = { scope:current_kingdom = title:k_wales }
									title_province = { geographical_region = btwk_custom_wales } 
								}
							}
							change_local_variable = { name = num_non_regional_germanic_provinces add = 1 }
						}
					}
				}
				if = {
					limit = { local_var:num_non_regional_germanic_provinces > 5 }
					# Baseline of 1 if any culture exists, and then another 0.5 for every existing regional cultures
					if = {
						limit = { scope:current_kingdom = { is_anglo_saxon_heptarchy_kingdom_trigger = yes } }
						change_variable = { name = regional_culture_progress_change add = 1 }
						every_in_global_list = {
							variable = anglo_saxon_kingdom_list
							limit = { has_variable = anglo_saxon_regional_culture }
							prev = { change_variable = { name = regional_culture_progress_change add = 0.5 } }
						}
					}
					# This is reduced for non-Heptarchy kingdoms
					else = {
						change_variable = { name = regional_culture_progress_change add = 0.67 }
						every_in_global_list = {
							variable = anglo_saxon_kingdom_list
							limit = { has_variable = anglo_saxon_regional_culture }
							prev = { change_variable = { name = regional_culture_progress_change add = 0.33 } }
						}
					}
				}
			}
			
			# Randomness factor
			random_list = {
				1 = { change_variable = { name = regional_culture_progress_change multiply = 0.70 } }
				1 = { change_variable = { name = regional_culture_progress_change multiply = 0.80 } }
				1 = { change_variable = { name = regional_culture_progress_change multiply = 0.90 } }
				1 = { change_variable = { name = regional_culture_progress_change multiply = 1.00 } }
				1 = { change_variable = { name = regional_culture_progress_change multiply = 1.10 } }
				1 = { change_variable = { name = regional_culture_progress_change multiply = 1.20 } }
				1 = { change_variable = { name = regional_culture_progress_change multiply = 1.30 } }
			}
			
			# In order to get any progress at all, there must be a minimum number of West Germanic provinces
			# in the kingdom area
			set_local_variable = { name = num_west_germanic_provinces value = 0 }
			every_direct_de_jure_vassal_title = {
				every_in_list = {
					variable = baseline_dynamic_de_jure_territory
					if = {
						limit = { 
							culture = { has_cultural_pillar = heritage_west_germanic }
							# Westernian can only appear in Wales
							OR = {
								NOT = { scope:current_kingdom = title:k_wales }
								title_province = { geographical_region = btwk_custom_wales } 
							}
						}
						change_local_variable = { name = num_west_germanic_provinces add = 1 }
					}
				}
			}
			every_de_jure_county = {
				limit = {
					culture = { has_cultural_pillar = heritage_west_germanic }
					NOT = { var:anglo_saxon_duchy.kingdom ?= scope:current_kingdom } 
					# Westernian can only appear in Wales
					OR = {
						NOT = { scope:current_kingdom = title:k_wales }
						title_province = { geographical_region = btwk_custom_wales } 
					}
				}
				change_local_variable = { name = num_west_germanic_provinces add = 1 }
			}
			if = {
				limit = { NOT = { local_var:num_west_germanic_provinces > 3 } }
				set_variable = { name = regional_culture_progress_change value = 0 }
			}
			
			# Actually apply the change
			change_variable = { 
				name = regional_culture_progress 
				add = this.var:regional_culture_progress_change 
			}
			
			# Capped at 60% progress before the consolidation/unification phase
			if = {
				limit = {
					exists = struggle:britannia_struggle
					NOT = { 
						struggle:britannia_struggle = { has_struggle_phase_parameter = allow_anglo_saxon_regional_cultures }
					}
				}
				clamp_variable = { name = regional_culture_progress max = 60 }
			}
		}
		
		# Calculate everyone's progress first, then spawn the cultures
		every_in_global_list = {
			variable = anglo_saxon_kingdom_list
			limit = { NOT = { has_variable = anglo_saxon_regional_culture } }
			
			save_scope_as = current_kingdom
			
			# If you reach 100% progress, then the new culture is created	
			if = {
				limit = {
					this.var:regional_culture_progress >= 100
					OR = {
						NOT = { exists = struggle:britannia_struggle }
						struggle:britannia_struggle = { has_struggle_phase_parameter = allow_anglo_saxon_regional_cultures }
					}
				}
				# If the kingdom has a holder, than diverge from the holder's culture
				# Unless they are already a regional culture
				if = {
					limit = { 
						exists = this.holder
						NOT = { 
							culture = { 
								OR = {
									has_variable = anglo_saxon_regional_culture_kingdom 
									has_variable = is_anglo_saxon_unified_culture
								} 
							}
						}
					}
					this.holder.culture = { save_scope_as = old_culture }
				}
				
				# Otherwise, take the most common non-regional West Germanic culture in the kingdom
				# Also needed if the holder is not West Germanic - we're creating a hybrid then
				if = {
					limit = {
						OR = {
							NOT = { exists = scope:old_culture }
							scope:old_culture = { NOT = { has_cultural_pillar = heritage_west_germanic } }
						}
					}
					set_local_variable = { name = most_common_culture_size value = 0 }
					every_culture_global = {
						limit = { 
							has_cultural_pillar = heritage_west_germanic
							NOT = { has_variable = anglo_saxon_regional_culture_kingdom }
							NOT = { has_variable = is_anglo_saxon_unified_culture }
						}
						set_local_variable = { name = num_culture_provinces value = 0 }
						every_culture_county = {
							limit = { this.var:anglo_saxon_duchy.kingdom = scope:current_kingdom }
							change_local_variable = { name = num_culture_provinces add = 1 }
						}
						# Special rule: Jutish counts for 1.5x in Kent
						if = {
							limit = { 
								scope:current_kingdom = title:k_cantia
								this = { culture_is_culture_or_descendant_trigger = { CULTURE = culture:jute } }
							}
							change_local_variable = { name = num_culture_provinces multiply = 1.5 }
						}
						if = {
							limit = { local_var:num_culture_provinces > local_var:most_common_culture_size }
							set_local_variable = { 
								name = most_common_culture_size
								value = local_var:num_culture_provinces
							}
							save_scope_as = dominant_west_germanic_culture
						}
					}
					# If somehow there is no most common culture, default to the historical
					if = {
						limit = { NOT = { exists = scope:dominant_west_germanic_culture } }
						if = {
							limit = {
								OR = {
									this = title:k_eastseaxe
									this = title:k_sussex
									AND = {
										this = title:k_wessex
										NOT = { has_variable = jutish_wessex }
									}
								}
							}
							culture:old_saxon = { save_scope_as = dominant_west_germanic_culture }
						}
						else_if = {
							limit = {
								OR = {
									this = title:k_cantia
									AND = {
										this = title:k_wessex
										has_variable = jutish_wessex
									}
								}
							}
							culture:jute = { save_scope_as = dominant_west_germanic_culture }
						}
						else = {
							culture:angle = { save_scope_as = dominant_west_germanic_culture }
						}
					}
				}
				if = {
					limit = { NOT = { exists = scope:old_culture } }
					scope:dominant_west_germanic_culture = { save_scope_as = old_culture }
				}
				
				# Since divergent culture colours are awkward, we script the historical options,
				# and only create new cultures when necessary
				if = {
					limit = {
						this = title:k_east_anglia
						scope:old_culture = culture:angle
					}
					culture:east_anglian = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
						copy_all_traditions_from = scope:old_culture
						set_ethos_from = scope:old_culture
						set_martial_custom_from = scope:old_culture
					}
				}
				else_if = {
					limit = {
						this = title:k_mercia
						scope:old_culture = culture:angle
					}
					culture:mercian = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
						copy_all_traditions_from = scope:old_culture
						set_ethos_from = scope:old_culture
						set_martial_custom_from = scope:old_culture
					}
				}
				else_if = {
					limit = {
						this = title:k_northumbria
						scope:old_culture = culture:angle
					}
					culture:northumbrian = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
						copy_all_traditions_from = scope:old_culture
						set_ethos_from = scope:old_culture
						set_martial_custom_from = scope:old_culture
					}
				}
				else_if = {
					limit = {
						this = title:k_eastseaxe
						scope:old_culture = culture:old_saxon
					}
					culture:east_saxon = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
						copy_all_traditions_from = scope:old_culture
						set_ethos_from = scope:old_culture
						set_martial_custom_from = scope:old_culture
					}
				}
				else_if = {
					limit = {
						this = title:k_sussex
						scope:old_culture = culture:old_saxon
					}
					culture:south_saxon = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
						copy_all_traditions_from = scope:old_culture
						set_ethos_from = scope:old_culture
						set_martial_custom_from = scope:old_culture
					}
				}
				else_if = {
					limit = {
						this = title:k_wessex
						scope:old_culture = culture:old_saxon
					}
					culture:west_saxon = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
						copy_all_traditions_from = scope:old_culture
						set_ethos_from = scope:old_culture
						set_martial_custom_from = scope:old_culture
					}
				}
				else_if = {
					limit = {
						this = title:k_cantia
						scope:old_culture = culture:jute
					}
					culture:kentish = {
						save_scope_as = new_culture
						reset_culture_creation_date = yes
						get_all_innovations_from = scope:old_culture
						copy_all_traditions_from = scope:old_culture
						set_ethos_from = scope:old_culture
						set_martial_custom_from = scope:old_culture
					}
				}
				# Fallback - make the new divergent culture (the colour will be bad, nothing we can do about it)
				# Ideally we wouldn't have to do this, but we can't change culture colour or parents, so...
				else = {
					if = {
						limit = { scope:old_culture = { has_cultural_pillar = heritage_west_germanic } }
						# Use a new unlanded character so we have complete control over the cultures shifts
						create_character = {
							dynasty = none
							location = this.title_capital_county.title_province
							culture = scope:old_culture
							faith = faith:anglo_saxon_pagan
							gender = male
							save_scope_as = culture_creator
						}
						scope:culture_creator = {
							# Stops normal notifications from creating new cultures
							add_character_flag = suppress_culture_notifications_and_achievements
							create_divergent_culture = yes
							death = natural
						}
					}
					else = {
						create_character = {
							dynasty = none
							location = this.title_capital_county.title_province
							culture = scope:dominant_west_germanic_culture
							faith = faith:anglo_saxon_pagan
							gender = male
							save_scope_as = culture_creator
						}
						scope:culture_creator = {
							# Stops normal notifications from creating new cultures
							add_character_flag = suppress_culture_notifications_and_achievements
							create_hybrid_culture = scope:old_culture
							death = natural
						}				
						scope:new_culture = {
							set_heritage_from = scope:dominant_west_germanic_culture
							set_language_from = scope:dominant_west_germanic_culture
							# Name list will be both but the West Germanic culture first, which is okay
						}		
					}
					
					# Set the proper name
					if = {
						limit = {
							this = title:k_wessex
							OR = {
								has_variable = jutish_wessex
								AND = {
									NOT = { has_variable = title_has_been_created }
									OR = {
										scope:old_culture = culture:jute
										AND = {
											NOT = { scope:old_culture = { has_cultural_pillar = heritage_west_germanic } }
											scope:dominant_west_germanic_culture = culture:jute
										}
									}
								}
							}
						}
						scope:new_culture = {
							set_culture_name = {
								noun = west_jutish
								collective_noun = west_jutish_collective_noun
								prefix = west_jutish_prefix
							}
						}
						# Rename Jutish Wessex to Westeotas ("West Jutes") if it has not yet been created
						if = {
							limit = { NOT = { has_variable = title_has_been_created } }
							title:k_wessex = {
								set_title_name = WESTEOTAS
								set_capital_county = title:c_clausentum
								set_variable = jutish_wessex
							}
						}
					}
					else_if = {
						limit = { this = title:k_wales }
						scope:new_culture = {
							set_culture_name = {
								noun = westernian
								collective_noun = westernian_collective_noun
								prefix = westernian_prefix
							}
						}
						# Rename Wales to Westerne if it has not yet been created
						if = {
							limit = { NOT = { has_variable = title_has_been_created } }
							title:k_wales = {
								set_title_name = WESTERNE
								set_variable = wales_renamed_westerne
							}
						}
					}
					else = {
						scope:new_culture = {
							set_culture_name = {
								noun = anglo_saxon_regional_culture_noun
								collective_noun = anglo_saxon_regional_culture_collective_noun
								prefix = anglo_saxon_regional_culture_noun		# Placeholder
							}
						}
					}
				}
				set_variable = { name = anglo_saxon_regional_culture value = scope:new_culture }
				scope:new_culture = {
					set_variable = { name = anglo_saxon_regional_culture_kingdom value = scope:current_kingdom }
					set_variable = { name = new_culture_tradition_discount days = 9125 }
				}
				if = {
					limit = {
						exists = struggle:britannia_struggle
					}
					struggle:britannia_struggle = { set_culture_as_involved = scope:new_culture }
				}
				
				# Copy acceptances
				scope:new_culture = { copy_acceptances_from_parent_cultures_effect = yes }
				
				# New culture spawns at capital of kingdom holder if possible
				if = {
					limit = {
						holder ?= {
							OR = {
								capital_county = { 
									county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								} 
								# If the holder holds multiple kingdom or higher titles, only do this if the
								# capital is actually in the kingdom
								NOT = {
									any_held_title = {
										tier >= tier_kingdom
										NOT = { this = scope:current_kingdom }
										NAND = {
											this = title:e_aengland
											title:e_aengland.var:aengland_primary_kingdom = scope:current_kingdom
										}
									}
								}
							}
						}
					}
					holder.capital_county = { 
						save_scope_as = new_culture_spawn_county
					}
				}
				# Next, try any county held directly by the holder
				if = {
					limit = { 
						NOT = { exists = scope:new_culture_spawn_county }
					}
					holder ?= {
						random_held_title = {
							limit = {
								tier = tier_county
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
							save_scope_as = new_culture_spawn_county
						}
					}
				}
				# Next, any non-regional culture West Germanic province in the de facto kingdom
				if = {
					limit = { 
						NOT = { exists = scope:new_culture_spawn_county }
					}
					holder ?= {
						random_sub_realm_county = {
							limit = {
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
							save_scope_as = new_culture_spawn_county
						}
					}
				}
				# Next, the capital of any independent parent culture ruler in the kingdom 
				if = {
					limit = { 
						NOT = { exists = scope:new_culture_spawn_county }
					}
					random_independent_ruler = {
						limit = {
							character_can_convert_to_anglo_saxon_regional_culture = yes
							scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
							capital_county = {
								scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
						}
						capital_county = { save_scope_as = new_culture_spawn_county }
					}
				}
				# Next, any parent culture province under any independent parent culture ruler in the kingdom 
				if = {
					limit = { 
						NOT = { exists = scope:new_culture_spawn_county }
					}
					random_independent_ruler = {
						limit = {
							character_can_convert_to_anglo_saxon_regional_culture = yes
							scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
							any_sub_realm_county = {
								scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
						}
						random_sub_realm_county = { 
							limit = {
								scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
							save_scope_as = new_culture_spawn_county 
						}
					}
				}
				# Next, any parent culture province under any parent culture ruler in the kingdom 
				if = {
					limit = { 
						NOT = { exists = scope:new_culture_spawn_county }
					}
					random_ruler = {
						limit = {
							character_can_convert_to_anglo_saxon_regional_culture = yes
							scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
							any_sub_realm_county = {
								scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
						}
						random_sub_realm_county = { 
							limit = {
								scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
							save_scope_as = new_culture_spawn_county 
						}
					}
				}
				# Next, any arbitary parent culture province in the kingdom 
				if = {
					limit = { 
						NOT = { exists = scope:new_culture_spawn_county }
					}
					random_county = {
						limit = {
							scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
							county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
							county_can_convert_to_anglo_saxon_regional_culture = yes
						}
						save_scope_as = new_culture_spawn_county						
					}
				}
				# Should never get here, but:
				# Next, any non-regional culture West Germanic province under
				# any independent non-regional culture West Germanic ruler in the kingdom 
				if = {
					limit = { 
						NOT = { exists = scope:new_culture_spawn_county }
					}
					random_independent_ruler = {
						limit = {
							character_can_convert_to_anglo_saxon_regional_culture = yes
							any_sub_realm_county = {
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
						}
						random_sub_realm_county = { 
							limit = {
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
							save_scope_as = new_culture_spawn_county 
						}
					}
				}
				# Next, any non-regional culture West Germanic province under
				# any non-regional culture West Germanic ruler in the kingdom 
				if = {
					limit = { 
						NOT = { exists = scope:new_culture_spawn_county }
					}
					random_ruler = {
						limit = {
							character_can_convert_to_anglo_saxon_regional_culture = yes
							any_sub_realm_county = {
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
						}
						random_sub_realm_county = { 
							limit = {
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
							save_scope_as = new_culture_spawn_county 
						}
					}
				}
				# Any arbitary non-regional culture West Germanic province in the kingdom 
				if = {
					limit = { 
						NOT = { exists = scope:new_culture_spawn_county }
					}
					random_county = {
						limit = {
							county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
							county_can_convert_to_anglo_saxon_regional_culture = yes
							culture = { has_cultural_pillar = heritage_west_germanic }
						}
						save_scope_as = new_culture_spawn_county						
					}
				}
				# And finally if all else fails, any arbitary convertable province in the kingdom 
				if = {
					limit = { 
						NOT = { exists = scope:new_culture_spawn_county }
					}
					random_county = {
						limit = {
							county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
							county_can_convert_to_anglo_saxon_regional_culture = yes
						}
						save_scope_as = new_culture_spawn_county						
					}
				}				
				
				# Convert all characters and counties in the spawn point, as well as in
				# neighbouring counties inside the kingdom
				scope:new_culture_spawn_county ?= {
					convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
						COUNTY_CULTURE_CONDITION_LHS = "county_can_convert_to_anglo_saxon_regional_culture"
						COUNTY_CULTURE_CONDITION_OP = "="
						COUNTY_CULTURE_CONDITION_RHS = "yes"
						CHAR_CULTURE_CONDITION_LHS = "character_can_convert_to_anglo_saxon_regional_culture"
						CHAR_CULTURE_CONDITION_OP = "="
						CHAR_CULTURE_CONDITION_RHS = "yes"
						NEW_CULTURE = scope:new_culture
					}
					every_neighboring_county = {
						limit = { county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom } }
						convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
							COUNTY_CULTURE_CONDITION_LHS = "county_can_convert_to_anglo_saxon_regional_culture"
							COUNTY_CULTURE_CONDITION_OP = "="
							COUNTY_CULTURE_CONDITION_RHS = "yes"
							CHAR_CULTURE_CONDITION_LHS = "character_can_convert_to_anglo_saxon_regional_culture"
							CHAR_CULTURE_CONDITION_OP = "="
							CHAR_CULTURE_CONDITION_RHS = "yes"
							NEW_CULTURE = scope:new_culture
						}
						# Seed some progress in surroundings to get more organic spread in the first few years
						every_neighboring_county = {
							limit = { 
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
							get_culture_spread_success_story_effect = { CULTURE = scope:new_culture }
							scope:culture_spread_progress_story = {
								random_list = {
									1 = { set_variable = { name = progress value = 20 } }
									1 = { set_variable = { name = progress value = 40 } }
									1 = { set_variable = { name = progress value = 60 } }
								}
							}
						}
					}
				}
				
				# If less than 6 counties were converted, try to look for other counties to spawn the culture in
				if = {
					limit = { has_local_variable = no_more_possible_culture_counties }
					remove_local_variable = no_more_possible_culture_counties
				}
				while = {
					limit = {
						scope:new_culture = { 
							OR = {
								any_culture_county = { count < 4 }
								AND = {		# Sussex only gets to grow to 4 counties because of how small it is
									any_culture_county = { count < 6 }
									NOT = { this.var:anglo_saxon_regional_culture_kingdom = title:k_sussex }
								}
							}
						}
						NOT = { has_local_variable = no_more_possible_culture_counties }
					}
					if = {
						limit = { exists = scope:new_culture_county }
						clear_saved_scope = new_culture_county
					}
					# First, try to just find adjacent convertable parent culture provinces
					scope:new_culture = { 
						random_culture_county = {
							limit = {
								any_neighboring_county = {
									scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
									county_can_convert_to_anglo_saxon_regional_culture = yes
									county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								}
							}
							random_neighboring_county = {
								limit = {
									scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
									county_can_convert_to_anglo_saxon_regional_culture = yes
									county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								}
								save_scope_as = new_culture_county
							}
						}
					}
					# Then, try to find convertable parent provinces in the kingdom if it exists
					if = {
						limit = { NOT = { exists = scope:new_culture_county } }
						holder ?= {
							random_sub_realm_county = {
								limit = {
									scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
									county_can_convert_to_anglo_saxon_regional_culture = yes
									county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								}
								save_scope_as = new_culture_county
							}
						}
					}
					# Then, try to just find adjacent convertable provinces
					if = {
						limit = { NOT = { exists = scope:new_culture_county } }
						scope:new_culture = { 
							random_culture_county = {
								limit = {
									any_neighboring_county = {
										county_can_convert_to_anglo_saxon_regional_culture = yes
										county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
									}
								}
								random_neighboring_county = {
									limit = {
										county_can_convert_to_anglo_saxon_regional_culture = yes
										county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
									}
									save_scope_as = new_culture_county
								}
							}
						}
					}
					# Then, try to find convertable provinces in the kingdom if it exists
					if = {
						limit = { NOT = { exists = scope:new_culture_county } }
						holder ?= {
							random_sub_realm_county = {
								limit = {
									county_can_convert_to_anglo_saxon_regional_culture = yes
									county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								}
								save_scope_as = new_culture_county
							}
						}
					}
					# Then, try to find convertable provinces under any independent parent culture convertable ruler in the kingdom
					if = {
						limit = { NOT = { exists = scope:new_culture_county } }							
						random_independent_ruler = {
							limit = {
								scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								character_can_convert_to_anglo_saxon_regional_culture = yes
								any_sub_realm_county = {
									scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
									county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
									county_can_convert_to_anglo_saxon_regional_culture = yes
								}
							}
							if = {
								limit = {
									capital_county = {
										scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
										county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
										county_can_convert_to_anglo_saxon_regional_culture = yes
									}
								}
								capital_county = { save_scope_as = new_culture_county }
							}
							else = {
								random_sub_realm_county = {
									limit = {
										scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
										county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
										county_can_convert_to_anglo_saxon_regional_culture = yes
									}
									save_scope_as = new_culture_county
								}
							}
						}
					}
					# Then, just straight up parent culture province
					if = {
						limit = { NOT = { exists = scope:new_culture_county } }
						random_county = {
							limit = {
								scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
							save_scope_as = new_culture_county
						}
					}
					# Then, try to find convertable provinces under any independent convertable ruler in the kingdom
					if = {
						limit = { NOT = { exists = scope:new_culture_county } }							
						random_independent_ruler = {
							limit = {
								character_can_convert_to_anglo_saxon_regional_culture = yes
								any_sub_realm_county = {
									county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
									county_can_convert_to_anglo_saxon_regional_culture = yes
								}
							}
							if = {
								limit = {
									capital_county = {
										county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
										county_can_convert_to_anglo_saxon_regional_culture = yes
									}
								}
								capital_county = { save_scope_as = new_culture_county }
							}
							else = {
								random_sub_realm_county = {
									limit = {
										county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
										county_can_convert_to_anglo_saxon_regional_culture = yes
									}
									save_scope_as = new_culture_county
								}
							}
						}
					}
					# Then, just straight up any convertable province
					if = {
						limit = { NOT = { exists = scope:new_culture_county } }
						random_county = {
							limit = {
								county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								county_can_convert_to_anglo_saxon_regional_culture = yes
							}
							save_scope_as = new_culture_county
						}
					}
					# Convert county if we found one, otherwise end the loop
					if = {
						limit = { exists = scope:new_culture_county }
						scope:new_culture_county = {
							convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
								COUNTY_CULTURE_CONDITION_LHS = "county_can_convert_to_anglo_saxon_regional_culture"
								COUNTY_CULTURE_CONDITION_OP = "="
								COUNTY_CULTURE_CONDITION_RHS = "yes"
								CHAR_CULTURE_CONDITION_LHS = "character_can_convert_to_anglo_saxon_regional_culture"
								CHAR_CULTURE_CONDITION_OP = "="
								CHAR_CULTURE_CONDITION_RHS = "yes"
								NEW_CULTURE = scope:new_culture
							}
						}
					}
					else = {
						set_local_variable = no_more_possible_culture_counties
					}
				}
				
				# Notify everyone
				this.holder ?= { trigger_event = { id = culture_shifts.0011 } }
				every_player = {
					limit = { NOT = { prev.holder ?= this } }
					trigger_event = { id = culture_shifts.0011 }
				}
				
				# Clear scopes in case multiple regional cultures spawn simultaneously
				clear_saved_scope = old_culture
				clear_saved_scope = new_culture
				clear_saved_scope = dominant_west_germanic_culture
				clear_saved_scope = new_culture_spawn_county
			}
		}
	}
}

culture_shifts.0011 = {
	type = character_event
	content_source = dlc_BTWK
	title = culture_shifts.0011.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:new_culture = { is_hybrid_culture = yes } }
				desc = culture_shifts.0011.desc.hybrid
			}
			desc = culture_shifts.0011.desc.divergent
		}
	}
	theme = realm
	
	left_portrait = {
		character = scope:new_culture_character
		animation = personality_honorable
	}
	
	immediate = {
		scope:new_culture = {
			this.var:anglo_saxon_regional_culture_kingdom = { save_scope_as = new_culture_kingdom }
			if = {
				limit = { exists = culture_head }
				culture_head = { save_scope_as = new_culture_character }
			}
			else_if = {
				limit = {
					scope:new_culture_kingdom.holder ?= { culture = scope:new_culture }
				}
				scope:new_culture_kingdom.holder = { save_scope_as = new_culture_character }
			}
			else_if = {
				limit = {
					any_ruler = { 
						culture = scope:new_culture
						highest_held_title_tier >= tier_duchy
					}
				}
				random_ruler = {
					limit = { 
						culture = scope:new_culture 
						highest_held_title_tier >= tier_duchy
					}
					save_scope_as = new_culture_character
				}
			}
			else_if = {
				limit = {
					any_ruler = { culture = scope:new_culture }
				}
				random_ruler = {
					limit = { culture = scope:new_culture }
					save_scope_as = new_culture_character
				}
			}
			else_if = {
				limit = {
					any_culture_county = {
						OR = {
							title_province = { geographical_region = btwk_world_britannia }
							title_province = { geographical_region = btwk_world_caledonia }
						}
						holder = {
							is_unromanized_germanic_culture_trigger = yes
							OR = {
								NOT = { culture = { has_variable = anglo_saxon_regional_culture_kingdom } }
								culture = scope:new_culture
							}
						}
					}
				}
				random_culture_county = {
					limit = {
						OR = {
							title_province = { geographical_region = btwk_world_britannia }
							title_province = { geographical_region = btwk_world_caledonia }
						}
						holder = {
							is_unromanized_germanic_culture_trigger = yes
							OR = {
								NOT = { culture = { has_variable = anglo_saxon_regional_culture_kingdom } }
								culture = scope:new_culture
							}
						}
					}
					holder = { save_scope_as = new_culture_character }
				}
			}
			else = {
				random_culture_county = {
					holder = { save_scope_as = new_culture_character }
				}
			}
		}
		if = {
			limit = { scope:new_culture = { is_hybrid_culture = yes } }
			scope:dominant_west_germanic_culture = { save_scope_as = parent_1 }
			scope:old_culture = { save_scope_as = parent_2 }
			custom_tooltip = culture_notification_hybrid_tooltip
		}
		else = {
			scope:old_culture = { save_scope_as = parent_1 }
			custom_tooltip = culture_notification_tooltip
		}
		custom_tooltip = culture_shifts.0011.culture_spread_tooltip
		if = {
			limit = { culture = scope:new_culture }
			custom_tooltip = culture_shifts.0011.culture_spread_to_us_tooltip
			custom_tooltip = culture_shifts.0011.culture_tradition_discount_tooltip
		}
	}

	option = {
		trigger = { 
			culture = scope:new_culture
		}
		name = culture_shifts.0011.a
	}
	
	option = {
		trigger = {
			NOT = { culture = scope:new_culture }
			character_can_convert_to_anglo_saxon_regional_culture = yes
			OR = {
				AND = {
					is_landed = yes
					capital_county = {
						county_is_in_anglo_saxon_regional_culture_kingdom = { 
							KINGDOM = scope:new_culture.var:anglo_saxon_regional_culture_kingdom
						}
					}
				}
				AND = {
					is_landed = no
					location = {
						county_is_in_anglo_saxon_regional_culture_kingdom = { 
							KINGDOM = scope:new_culture.var:anglo_saxon_regional_culture_kingdom
						}
					}
				}
			}
		}
		name = culture_shifts.0011.b
		custom_tooltip = culture_shifts.0011.b.tt
	}
	
	option = {
		trigger = {
			NOT = { culture = scope:new_culture }
			NAND = {
				NOT = { culture = scope:new_culture }
				character_can_convert_to_anglo_saxon_regional_culture = yes
				OR = {
					AND = {
						is_landed = yes
						capital_county = {
							county_is_in_anglo_saxon_regional_culture_kingdom = { 
								KINGDOM = scope:new_culture.var:anglo_saxon_regional_culture_kingdom
							}
						}
					}
					AND = {
						is_landed = no
						location = {
							county_is_in_anglo_saxon_regional_culture_kingdom = { 
								KINGDOM = scope:new_culture.var:anglo_saxon_regional_culture_kingdom
							}
						}
					}
				}
			}
			any_sub_realm_county = {
				save_temporary_scope_as = current_county
				county_can_convert_to_anglo_saxon_regional_culture = yes
				county_is_in_anglo_saxon_regional_culture_kingdom = {
					KINGDOM = scope:new_culture.var:anglo_saxon_regional_culture_kingdom
				}
			}
		}
		name = culture_shifts.0011.c
		custom_tooltip = culture_shifts.0011.c.tt
	}
	
	option = {
		trigger = { always = no }
		fallback = yes
		name = culture_shifts.0011.d
	}
}

# Yearly event spreading the regional culture to new provinces and characters
culture_shifts.0012 = {
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		has_variable = anglo_saxon_regional_culture_kingdom
		culture_age < 50		# Only spreads for the first 50 years
	}
	
	immediate = {
		this.var:anglo_saxon_regional_culture_kingdom = { save_scope_as = culture_kingdom }
		every_county = {
			limit = {
				county_is_in_anglo_saxon_regional_culture_kingdom = {
					KINGDOM = scope:culture_kingdom
				}
				county_can_convert_to_anglo_saxon_regional_culture = yes
			}
			# Fetch the culture progress story struct
			get_culture_spread_success_story_effect = { CULTURE = root }
			
			# Calculate progress
			set_local_variable = { name = progress_change value = 0 }
			
			# Additive modifiers start here
			# Base spread from neighbouring county of new culture, modified by same faith/religion
			if = {
				limit = { 
					any_neighboring_county = { 
						culture = root 
						faith = prev.faith
					} 
				}
				change_local_variable = { name = progress_change add = 5 }
			}
			else_if = {
				limit = { 
					any_neighboring_county = { 
						culture = root 
						faith = prev.faith
					} 
				}
				change_local_variable = { name = progress_change add = 3.5 }
			}
			else_if = {
				limit = { any_neighboring_county = { culture = root } }
				change_local_variable = { name = progress_change add = 2 }
			}
			# Base spread from being a parent culture
			if = {
				limit = { root = { is_child_culture_of_trigger = { TARGET = prev.culture } } }
				change_local_variable = { name = progress_change add = 5 }
			}
			# Base spread from being controlled by the associated kingdom, 
			# modified by holder's faith/religion 
			if = {
				limit = {
					holder = {
						OR = {
							has_title = scope:culture_kingdom
							any_liege_or_above = { has_title = scope:culture_kingdom }
						}
					}
				}
				change_local_variable = { name = progress_change add = 1 }
				if = {
					limit = { scope:culture_kingdom.holder.culture = root }
					change_local_variable = { name = progress_change add = 1 }
				}
				if = {
					limit = { scope:culture_kingdom.holder.faith = this.faith }
					change_local_variable = { name = progress_change add = 1 }
				}
				else_if = {
					limit = { scope:culture_kingdom.holder.religion = this.religion }
					change_local_variable = { name = progress_change add = 0.5 }
				}
			}
			# Base spread from being directly held by the associated king
			if = {
				limit = { 
					scope:culture_kingdom.holder.capital_county = this 
					scope:culture_kingdom.holder.culture = root
				}
				change_local_variable = { name = progress_change add = 5 }
			}
			else_if = {
				limit = { 
					this.holder = scope:culture_kingdom.holder
					scope:culture_kingdom.holder.culture = root
				}
				change_local_variable = { name = progress_change add = 2 }
			}
			# Multiplicative modifiers start here
			# Being controlled by the new culture
			if = {
				limit = {
					holder = { culture = root }
				}
				change_local_variable = { name = progress_change multiply = 1.2 }
			}
			if = {
				limit = {
					holder = { top_liege = { culture = root } }
				}
				change_local_variable = { name = progress_change multiply = 1.2 }
			}
			# Penalty for spreading to non-West Germanic provinces, unless part of the
			# original hybridization
			if = {
				limit = {
					NOT = { culture = { has_cultural_pillar = heritage_west_germanic } }
					NOT = { root = { is_child_culture_of_trigger = { TARGET = prev.culture } } }
				}
				change_local_variable = { name = progress_change multiply = 0.75 }
			}
			# Penalty if the kingdom has no holder
			if = {
				limit = {
					NOT = { exists = scope:culture_kingdom.holder }
				}
				change_local_variable = { name = progress_change multiply = 0.75 }
			}
			# Penalty if outside de jure
			if = {
				limit = {
					NOR = {
						kingdom = scope:culture_kingdom
						this.var:anglo_saxon_duchy.kingdom = scope:culture_kingdom
					}
				}
				change_local_variable = { name = progress_change multiply = 0.67 }
			}
			# Terrain modifiers
			if = {
				limit = {
					OR = {
						title_province = { terrain = farmlands }
						title_province = { terrain = plains }
					}
				}
				change_local_variable = { name = progress_change multiply = 1.1 }
			}
			else_if = {
				limit = {
					OR = {
						title_province = { terrain = hills }
						title_province = { terrain = desert }
						title_province = { terrain = oasis }
					}
				}
				change_local_variable = { name = progress_change multiply = 0.8 }
			}
			else_if = {
				limit = {
					title_province = { terrain = forest }
				}
				change_local_variable = { name = progress_change multiply = 0.75 }
			}
			else_if = {
				limit = {
					OR = {
						title_province = { terrain = jungle }
						title_province = { terrain = taiga }
						title_province = { terrain = wetlands }
					}
				}
				change_local_variable = { name = progress_change multiply = 0.67 }
			}
			else_if = {
				limit = {
					OR = {
						title_province = { terrain = mountains }
						title_province = { terrain = desert_mountains }
					}
				}
				change_local_variable = { name = progress_change multiply = 0.5 }
			}
			# Spread along major rivers
			if = {
				limit = {
					any_county_province = {
						any_neighboring_province = {
							is_river_province = yes
							any_neighboring_province = {
								culture = root
							}
						}
					}
				}	
				change_local_variable = { name = progress_change multiply = 1.25 }
			}
			
			# Randomness factor
			random_list = {
				1 = { change_local_variable = { name = progress_change multiply = 0.70 } }
				1 = { change_local_variable = { name = progress_change multiply = 0.80 } }
				1 = { change_local_variable = { name = progress_change multiply = 0.90 } }
				1 = { change_local_variable = { name = progress_change multiply = 1.00 } }
				1 = { change_local_variable = { name = progress_change multiply = 1.10 } }
				1 = { change_local_variable = { name = progress_change multiply = 1.20 } }
				1 = { change_local_variable = { name = progress_change multiply = 1.30 } }
			}
			
			scope:culture_spread_progress_story = {
				change_variable = { 
					name = progress 
					add = local_var:progress_change 
				}
			}
			
			# If progress hits 100, flip the county and its holder, if this is the holder's capital
			if = {
				limit = { scope:culture_spread_progress_story.var:progress >= 100 }
				save_scope_as = current_county
				culture = { save_scope_as = old_culture }
				root = { save_scope_as = new_culture }
				convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
					COUNTY_CULTURE_CONDITION_LHS = "county_can_convert_to_anglo_saxon_regional_culture"
					COUNTY_CULTURE_CONDITION_OP = "="
					COUNTY_CULTURE_CONDITION_RHS = "yes"
					CHAR_CULTURE_CONDITION_LHS = "character_can_convert_to_anglo_saxon_regional_culture"
					CHAR_CULTURE_CONDITION_OP = "="
					CHAR_CULTURE_CONDITION_RHS = "yes"
					NEW_CULTURE = root
				}
				
				# If this was the capital, send a notification to the ruler that they have been converted
				holder = {
					if = {
						limit = { capital_county = prev }
						trigger_event = { id = culture_shifts.0013 }
					}
					
					# Also send toast to holder and all lieges
					trigger_event = { id = culture_shifts.0014 }
					every_liege_or_above = { trigger_event = { id = culture_shifts.0014 } }
				}
			}
			
			clear_saved_scope = culture_spread_progress_story
		}
		
		# Culture also spreads to rulers whose capital have 
		# already flipped, but they themselves haven't for some reason
		every_culture_county = {
			holder = {
				if = {
					limit = {
						character_can_convert_to_anglo_saxon_regional_culture = yes
						capital_county = prev
					}
					convert_character_with_family_and_courtiers_effect = {
						CULTURE_CONDITION_LHS = "character_can_convert_to_anglo_saxon_regional_culture"
						CULTURE_CONDITION_OP = "="
						CULTURE_CONDITION_RHS = "yes"
						NEW_CULTURE = root
					}
					trigger_event = { id = culture_shifts.0013 }
				}
			}
			
			# And also adventurers in a already-flipped county location
			convert_county_unlanded_domiciles_effect = {
				CULTURE_CONDITION_LHS = "character_can_convert_to_anglo_saxon_regional_culture"
				CULTURE_CONDITION_OP = "="
				CULTURE_CONDITION_RHS = "yes"
				NEW_CULTURE = root
				DOMICILE_OWNER_EFFECT = "trigger_event = { id = culture_shifts.0013 }"
			}
		}
		
		# Rulers in the kingdom without a West Germanic capital province can flip if any of their
		# held or subrealm provinces or lieges have flipped to a regional culture
		# Or (slowly) if their liege is not West Germanic
		every_ruler = {
			limit = {
				character_can_convert_to_anglo_saxon_regional_culture = yes
				capital_county = {
					NOR = { 
						county_can_convert_to_anglo_saxon_regional_culture = yes
						culture = {
							OR = {
								has_variable = anglo_saxon_regional_culture_kingdom
								has_variable = is_anglo_saxon_unified_culture
							}
						}
					}
					county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:culture_kingdom }
				}
			}
			if = {
				limit = {
					OR = {
						any_liege_or_above = { culture = root }
						any_sub_realm_county = { culture = root }
					}
				}
				random = {
					chance = 25
					modifier = {
						factor = 2
						any_held_title = {
							tier = tier_county
							culture = root
						}
					}
					convert_character_with_family_and_courtiers_effect = {
						CULTURE_CONDITION_LHS = "character_can_convert_to_anglo_saxon_regional_culture"
						CULTURE_CONDITION_OP = "="
						CULTURE_CONDITION_RHS = "yes"
						NEW_CULTURE = root
					}
					trigger_event = { id = culture_shifts.0013 }
				}
			}
			else_if = {
				limit = {
					NOT = { any_liege_or_above = { culture = { has_cultural_pillar = heritage_west_germanic } } }
				}
				random = {
					chance = 10
					convert_character_with_family_and_courtiers_effect = {
						CULTURE_CONDITION_LHS = "character_can_convert_to_anglo_saxon_regional_culture"
						CULTURE_CONDITION_OP = "="
						CULTURE_CONDITION_RHS = "yes"
						NEW_CULTURE = root
					}
					trigger_event = { id = culture_shifts.0013 }
				}
			}
		}
		
		# Domicile holders in the region may also similarly flip if not in a West Germanic province
		every_domicile = {
			limit = {
				owner = { 
					character_can_convert_to_anglo_saxon_regional_culture = yes
					is_independent_domicile_holder_for_culture_shift_trigger = yes
				}
				domicile_location.county = {
					NOR = { 
						county_can_convert_to_anglo_saxon_regional_culture = yes
						culture = {
							OR = {
								has_variable = anglo_saxon_regional_culture_kingdom
								has_variable = is_anglo_saxon_unified_culture
							}
						}
					}
					county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:culture_kingdom }
				}
			}
			owner = { 
				random = {
					chance = 10
					convert_character_with_family_and_courtiers_effect = {
						CULTURE_CONDITION_LHS = "character_can_convert_to_anglo_saxon_regional_culture"
						CULTURE_CONDITION_OP = "="
						CULTURE_CONDITION_RHS = "yes"
						NEW_CULTURE = root
					}
					trigger_event = { id = culture_shifts.0013 }
				}
			}
		}
	}
}

# Notification event for flipped characters
culture_shifts.0013 = {
	type = character_event
	content_source = dlc_BTWK
	title = culture_shifts.0013.t
	desc = culture_shifts.0013.desc
	theme = realm
	
	left_portrait = {
		character = root
		animation = personality_honorable
	}
	
	immediate = {
		custom_tooltip = culture_shifts.0013.culture_spread_to_us_tooltip
	}

	option = {
		name = culture_shifts.0013.a
	}
}

# Toast for flipped provinces
culture_shifts.0014 = {
	hidden = yes

	immediate = {
		send_interface_toast = {
			type = msg_culture_conversion
			title = culture_shifts.0014.t
			custom_tooltip = culture_shifts.0014.desc
		}
	}
}

### ANGLO-SAXON UNIFIED CULTURE EMERGENCE ###
# Anglo-Saxon culture spawns
culture_shifts.0020 = {
	scope = character
	content_source = dlc_BTWK
	hidden = yes
	
	immediate = {
		save_scope_as = founder
		
		# Diverge from the Bretwalda's culture
		root.culture = { save_scope_as = old_culture }
		
		# Use a new unlanded character so we have complete control over the cultures shifts
		create_character = {
			dynasty = none
			location = this.capital_province
			culture = scope:old_culture
			faith = this.faith
			gender = male
			save_scope_as = culture_creator
		}
		scope:culture_creator = {
			# Stops normal notifications from creating new cultures
			add_character_flag = suppress_culture_notifications_and_achievements
			create_divergent_culture = yes
			death = natural
		}
		
		# Set flags and culture name/properties
		title:e_aengland = { set_variable = { name = anglo_saxon_unified_culture value = scope:new_culture } }
		scope:new_culture = {
			set_variable = is_anglo_saxon_unified_culture
			set_culture_name = {
				noun = anglo_saxon
				collective_noun = anglo_saxon_collective_noun
				prefix = anglo_saxon_prefix
			}
			if = {
				limit = {
					OR = {
						has_primary_name_list = name_list_angle
						has_primary_name_list = name_list_jute
						has_primary_name_list = name_list_old_saxon
						has_primary_name_list = name_list_oldfrisian
					}
				}
				set_name_list = name_list_anglo_saxon		# Shift to "late" Anglo-Saxon names
			}
			set_variable = { name = new_culture_tradition_discount days = 9125 }
		}
		if = {
			limit = {
				exists = struggle:britannia_struggle
			}
			struggle:britannia_struggle = { set_culture_as_involved = scope:new_culture }
		}
				
		# New culture spawns at capital if possible
		if = {
			limit = {
				capital_county = {
					can_convert_to_anglo_saxon_unified_culture = yes
					county_is_in_anglo_saxon_unified_culture_area = yes
				}
			}
			capital_county = { 
				save_scope_as = new_culture_spawn_county
			}
		}
		# Next, try any directly held county in the capital kingdom
		if = {
			limit = { 
				NOT = { exists = scope:new_culture_spawn_county }
			}
			random_held_title = {
				limit = {
					tier = tier_county
					can_convert_to_anglo_saxon_unified_culture = yes
					county_is_in_anglo_saxon_unified_culture_area = yes
					kingdom = root.capital_county.kingdom
				}
				save_scope_as = new_culture_spawn_county
			}
		}
		# Next, any West Germanic province in the capital kingdom
		if = {
			limit = { 
				NOT = { exists = scope:new_culture_spawn_county }
			}
			random_sub_realm_county = {
				limit = {
					can_convert_to_anglo_saxon_unified_culture = yes
					county_is_in_anglo_saxon_unified_culture_area = yes
					kingdom = root.capital_county.kingdom
				}
				save_scope_as = new_culture_spawn_county
			}
		}
		# Next, any directly held county West Germanic province in Britannia
		if = {
			limit = { 
				NOT = { exists = scope:new_culture_spawn_county }
			}
			random_held_title = {
				limit = {
					tier = tier_county
					can_convert_to_anglo_saxon_unified_culture = yes
					county_is_in_anglo_saxon_unified_culture_area = yes
				}
				save_scope_as = new_culture_spawn_county
			}
		}
		# Fallback to any West Germanic province under the realm in Britannia
		if = {
			limit = { 
				NOT = { exists = scope:new_culture_spawn_county }
			}
			random_sub_realm_county = {
				limit = {
					tier = tier_county
					can_convert_to_anglo_saxon_unified_culture = yes
					county_is_in_anglo_saxon_unified_culture_area = yes
				}
				save_scope_as = new_culture_spawn_county
			}
		}
		# If somehow you still don't have any then you just don't get the culture spawning in any provinces		
		
		# Convert all West Germanic characters and counties in the spawn point and neighbouring counties
		scope:new_culture_spawn_county ?= {
			convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
				COUNTY_CULTURE_CONDITION_LHS = "can_convert_to_anglo_saxon_unified_culture"
				COUNTY_CULTURE_CONDITION_OP = "="
				COUNTY_CULTURE_CONDITION_RHS = "yes"
				CHAR_CULTURE_CONDITION_LHS = "can_convert_to_anglo_saxon_unified_culture"
				CHAR_CULTURE_CONDITION_OP = "="
				CHAR_CULTURE_CONDITION_RHS = "yes"
				NEW_CULTURE = scope:new_culture
			}
			every_neighboring_county = {
				limit = { county_is_in_anglo_saxon_unified_culture_area = yes }
				convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
					COUNTY_CULTURE_CONDITION_LHS = "can_convert_to_anglo_saxon_unified_culture"
					COUNTY_CULTURE_CONDITION_OP = "="
					COUNTY_CULTURE_CONDITION_RHS = "yes"
					CHAR_CULTURE_CONDITION_LHS = "can_convert_to_anglo_saxon_unified_culture"
					CHAR_CULTURE_CONDITION_OP = "="
					CHAR_CULTURE_CONDITION_RHS = "yes"
					NEW_CULTURE = scope:new_culture
				}
				# Seed some progress in surroundings to get more organic spread in the first few years
				every_neighboring_county = {
					limit = { 
						county_is_in_anglo_saxon_unified_culture_area = yes
						can_convert_to_anglo_saxon_unified_culture = yes
					}
					set_variable = is_neighbouring_neighbouring_county
					get_culture_spread_success_story_effect = { CULTURE = scope:new_culture }
					scope:culture_spread_progress_story = {
						random_list = {
							1 = { set_variable = { name = progress value = 20 } }
							1 = { set_variable = { name = progress value = 40 } }
							1 = { set_variable = { name = progress value = 60 } }
						}
					}
				}
			}
		}
		
		# Notify everyone
		trigger_event = { id = culture_shifts.0021 }
		every_player = {
			limit = { NOT = { this = root } }
			trigger_event = { id = culture_shifts.0021 }
		}
	}
}

# Notify creation of Anglo-Saxon culture
culture_shifts.0021 = {
	type = character_event
	content_source = dlc_BTWK
	title = culture_shifts.0021.t
	desc = culture_shifts.0021.desc
	theme = realm
	
	left_portrait = {
		character = scope:founder
		animation = personality_honorable
	}
	
	immediate = {
		scope:old_culture = { save_scope_as = parent_1 }
		custom_tooltip = culture_notification_tooltip
		custom_tooltip = culture_shifts.0021.culture_spread_tooltip
		if = {
			limit = { culture = scope:new_culture }
			custom_tooltip = culture_shifts.0021.culture_spread_to_us_tooltip
			custom_tooltip = culture_shifts.0021.culture_tradition_discount_tooltip
		}
	}

	option = {
		trigger = { 
			culture = scope:new_culture
		}
		name = culture_shifts.0021.a
	}
	
	option = {
		trigger = {
			NOT = { culture = scope:new_culture }
			can_convert_to_anglo_saxon_unified_culture = yes
			capital_county = {
				county_is_in_anglo_saxon_unified_culture_area = yes
			}
		}
		name = culture_shifts.0021.b
		custom_tooltip = culture_shifts.0021.b.tt
	}
	
	option = {
		trigger = {
			NOT = { culture = scope:new_culture }
			NAND = {
				can_convert_to_anglo_saxon_unified_culture = yes
				capital_county = {
					county_is_in_anglo_saxon_unified_culture_area = yes
				}
			}
			any_sub_realm_county = {
				can_convert_to_anglo_saxon_unified_culture = yes
				county_is_in_anglo_saxon_unified_culture_area = yes
			}
		}
		name = culture_shifts.0021.c
		custom_tooltip = culture_shifts.0021.c.tt
	}
	
	option = {
		trigger = { always = no }
		fallback = yes
		name = culture_shifts.0021.d
	}
}

# Unified Anglo-Saxon culture spreads over time
culture_shifts.0022 = {
	scope = culture
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		has_variable = is_anglo_saxon_unified_culture
		culture_age < 50		# Only spreads for the first 50 years
	}
	
	immediate = {
		every_county = {
			limit = {
				county_is_in_anglo_saxon_unified_culture_area = yes
				can_convert_to_anglo_saxon_unified_culture = yes
			}
			# Fetch the culture progress story struct
			get_culture_spread_success_story_effect = { CULTURE = root }
			
			# Calculate progress
			set_local_variable = { name = progress_change value = 0 }
			
			# Additive modifiers start here
			# Base spread from neighbouring county of new culture, modified by same faith/religion
			if = {
				limit = { 
					any_neighboring_county = { 
						culture = root 
						faith = prev.faith
					} 
				}
				change_local_variable = { name = progress_change add = 5 }
			}
			else_if = {
				limit = { 
					any_neighboring_county = { 
						culture = root 
						faith = prev.faith
					} 
				}
				change_local_variable = { name = progress_change add = 3.5 }
			}
			else_if = {
				limit = { any_neighboring_county = { culture = root } }
				change_local_variable = { name = progress_change add = 2 }
			}
			# Base spread from being a parent culture
			if = {
				limit = { root = { is_child_culture_of_trigger = { TARGET = prev.culture } } }
				change_local_variable = { name = progress_change add = 5 }
			}
			# Base spread from being controlled by e_aengland, 
			# modified by holder's faith/religion 
			if = {
				limit = {
					holder = {
						OR = {
							has_title = title:e_aengland
							any_liege_or_above = { has_title = title:e_aengland }
						}
					}
				}
				change_local_variable = { name = progress_change add = 1 }
				if = {
					limit = { title:e_aengland.holder.culture = root }
					change_local_variable = { name = progress_change add = 1 }
				}
				if = {
					limit = { title:e_aengland.holder.faith = this.faith }
					change_local_variable = { name = progress_change add = 1 }
				}
				else_if = {
					limit = { title:e_aengland.holder.religion = this.religion }
					change_local_variable = { name = progress_change add = 0.5 }
				}
			}
			# Base spread from being directly held by Aengland
			if = {
				limit = { 
					title:e_aengland.holder.capital_county = this 
					title:e_aengland.holder.culture = root
				}
				change_local_variable = { name = progress_change add = 5 }
			}
			else_if = {
				limit = { 
					this.holder = title:e_aengland.holder
					title:e_aengland.holder.culture = root
				}
				change_local_variable = { name = progress_change add = 2 }
			}
			# Multiplicative modifiers start here
			# Being controlled by the new culture
			if = {
				limit = {
					holder = { culture = root }
				}
				change_local_variable = { name = progress_change multiply = 1.2 }
			}
			if = {
				limit = {
					holder = { top_liege = { culture = root } }
				}
				change_local_variable = { name = progress_change multiply = 1.2 }
			}
			# Penalty if e_aengland has no holder
			if = {
				limit = {
					NOT = { exists = title:e_aengland.holder }
				}
				change_local_variable = { name = progress_change multiply = 0.5 }
			}
			# Terrain modifiers
			apply_culture_spread_progress_terrain_modifiers = yes
			# Spread along major rivers
			if = {
				limit = {
					any_county_province = {
						any_neighboring_province = {
							is_river_province = yes
							any_neighboring_province = {
								culture = root
							}
						}
					}
				}	
				change_local_variable = { name = progress_change multiply = 1.25 }
			}
			
			# Randomness factor
			random_list = {
				1 = { change_local_variable = { name = progress_change multiply = 0.70 } }
				1 = { change_local_variable = { name = progress_change multiply = 0.80 } }
				1 = { change_local_variable = { name = progress_change multiply = 0.90 } }
				1 = { change_local_variable = { name = progress_change multiply = 1.00 } }
				1 = { change_local_variable = { name = progress_change multiply = 1.10 } }
				1 = { change_local_variable = { name = progress_change multiply = 1.20 } }
				1 = { change_local_variable = { name = progress_change multiply = 1.30 } }
			}
			
			scope:culture_spread_progress_story = {
				change_variable = { 
					name = progress 
					add = local_var:progress_change 
				}
			}
			
			# If progress hits 100, flip the county and its holder, if this is the holder's capital
			if = {
				limit = { scope:culture_spread_progress_story.var:progress >= 100 }
				save_scope_as = current_county
				culture = { save_scope_as = old_culture }
				root = { save_scope_as = new_culture }
				convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
					COUNTY_CULTURE_CONDITION_LHS = "can_convert_to_anglo_saxon_unified_culture"
					COUNTY_CULTURE_CONDITION_OP = "="
					COUNTY_CULTURE_CONDITION_RHS = "yes"
					CHAR_CULTURE_CONDITION_LHS = "can_convert_to_anglo_saxon_unified_culture"
					CHAR_CULTURE_CONDITION_OP = "="
					CHAR_CULTURE_CONDITION_RHS = "yes"
					NEW_CULTURE = root
				}
				
				# If this was the capital, send a notification to the ruler that they have been converted
				holder = {
					if = {
						limit = { capital_county = prev }
						trigger_event = { id = culture_shifts.0023 }
					}
					
					# Also send toast to holder and all lieges
					trigger_event = { id = culture_shifts.0014 }
					every_liege_or_above = { trigger_event = { id = culture_shifts.0024 } }
				}
			}
			
			clear_saved_scope = culture_spread_progress_story
		}
		
		# Culture also spreads to rulers whose capital have 
		# already flipped, but they themselves haven't for some reason
		every_culture_county = {
			holder = {
				if = {
					limit = {
						can_convert_to_anglo_saxon_unified_culture = yes
						capital_county = prev
					}
					convert_character_with_family_and_courtiers_effect = {
						CULTURE_CONDITION_LHS = "can_convert_to_anglo_saxon_unified_culture"
						CULTURE_CONDITION_OP = "="
						CULTURE_CONDITION_RHS = "yes"
						NEW_CULTURE = root
					}
					trigger_event = { id = culture_shifts.0023 }
				}
			}
			
			# And also adventurers in a already-flipped county location
			convert_county_unlanded_domiciles_effect = {
				CULTURE_CONDITION_LHS = "can_convert_to_anglo_saxon_unified_culture"
				CULTURE_CONDITION_OP = "="
				CULTURE_CONDITION_RHS = "yes"
				NEW_CULTURE = root
				DOMICILE_OWNER_EFFECT = "trigger_event = { id = culture_shifts.0023 }"
			}
		}
		
		# Rulers in the kingdom without a West Germanic capital province can flip if any of their
		# held or subrealm provinces or lieges have flipped to the unified Anglo-Saxon culture
		every_ruler = {
			limit = {
				can_convert_to_anglo_saxon_unified_culture = yes
				capital_county = {
					NOR = { 
						can_convert_to_anglo_saxon_unified_culture = yes
						culture = {
							has_variable = is_anglo_saxon_unified_culture
						}
					}
					county_is_in_anglo_saxon_unified_culture_area = yes
				}
			}
			if = {
				limit = {
					any_sub_realm_county = { culture = root }
				}
				random = {
					chance = 25
					modifier = {
						factor = 2
						any_held_title = {
							tier = tier_county
							culture = root
						}
					}
					convert_character_with_family_and_courtiers_effect = {
						CULTURE_CONDITION_LHS = "can_convert_to_anglo_saxon_unified_culture"
						CULTURE_CONDITION_OP = "="
						CULTURE_CONDITION_RHS = "yes"
						NEW_CULTURE = root
					}
					trigger_event = { id = culture_shifts.0023 }
				}
			}
			else_if = {
				limit = {
					any_liege_or_above = { culture = root }
				}
				random = {
					chance = 10
					convert_character_with_family_and_courtiers_effect = {
						CULTURE_CONDITION_LHS = "can_convert_to_anglo_saxon_unified_culture"
						CULTURE_CONDITION_OP = "="
						CULTURE_CONDITION_RHS = "yes"
						NEW_CULTURE = root
					}
					trigger_event = { id = culture_shifts.0023 }
				}
			}
		}
		
		# Domicile holders in the region may also similarly flip if not in a West Germanic province
		every_domicile = {
			limit = {
				owner = { 
					can_convert_to_anglo_saxon_unified_culture = yes
					is_independent_domicile_holder_for_culture_shift_trigger = yes
				}
				domicile_location.county = {
					NOR = { 
						can_convert_to_anglo_saxon_unified_culture = yes
						culture = {
							has_variable = is_anglo_saxon_unified_culture
						}
					}
					county_is_in_anglo_saxon_unified_culture_area = yes
				}
			}
			owner = { 
				random = {
					chance = 10
					convert_character_with_family_and_courtiers_effect = {
						CULTURE_CONDITION_LHS = "can_convert_to_anglo_saxon_unified_culture"
						CULTURE_CONDITION_OP = "="
						CULTURE_CONDITION_RHS = "yes"
						NEW_CULTURE = root
					}
					trigger_event = { id = culture_shifts.0023 }
				}
			}
		}
	}
}

# Notification event for flipped characters
culture_shifts.0023 = {
	type = character_event
	content_source = dlc_BTWK
	title = culture_shifts.0023.t
	desc = culture_shifts.0023.desc
	theme = realm
	
	left_portrait = {
		character = root
		animation = personality_honorable
	}
	
	immediate = {
		custom_tooltip = culture_shifts.0023.culture_spread_to_us_tooltip
	}

	option = {
		name = culture_shifts.0023.a
	}
}

# Toast for flipped provinces
culture_shifts.0024 = {
	hidden = yes

	immediate = {
		send_interface_toast = {
			type = msg_culture_conversion
			title = culture_shifts.0024.t
			custom_tooltip = culture_shifts.0024.desc
		}
	}
}

### ROMANO-BRITISH CULTURE EMERGENCES ###
# Brithenig Culture counter and emergence
culture_shifts.0030 = {
	scope = none
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		# While there are still Romano-British counties
		culture:romanobritish = { any_culture_county = { count >= 1 } }
		NOT = { culture:brithenig = { has_variable = culture_has_emerged } }
	}
	
	immediate = {
		culture:romanobritish = {
			# Check for Brithineg culture emergence
			if = {
				limit = { NOT = { has_variable = brithenig_emergence_progress } }
				set_variable = { name = brithenig_emergence_progress value = 0 }
			}
			set_variable = { name = brithenig_emergence_progress_change value = 0 }
			
			# If at least 20 Romano-British provinces have a Brythonic culture 
			# top liege, then Brithineg culture progresses
			if = {
				limit = {
					any_culture_county = {
						count >= 20
						holder.top_liege.culture = { has_cultural_pillar = heritage_brythonic }
					}
				}
				change_variable = { name = brithenig_emergence_progress_change add = 2 }
				
				# If there is a Brythonic heritage high king, happens faster
				if = {
					limit = {
						exists = title:e_britannia.holder
						title:e_britannia.holder.culture = { has_cultural_pillar = heritage_brythonic }
					}
					change_variable = { name = brithenig_emergence_progress_change add = 1 }
				}
				# If there are a lot of Brythonic-controlled provinces, happens faster
				if = {
					limit = {
						any_culture_county = {
							count >= 60
							holder.top_liege.culture = { has_cultural_pillar = heritage_brythonic }
						}
					}
					change_variable = { name = brithenig_emergence_progress_change add = 1 }
				}
				else_if = {
					limit = {
						any_culture_county = {
							count >= 40
							holder.top_liege.culture = { has_cultural_pillar = heritage_brythonic }
						}
					}
					change_variable = { name = brithenig_emergence_progress_change add = 0.5 }
				}
			}
			else = {		# Progress decays if there is not enough Brythonic control
				change_variable = { name = brithenig_emergence_progress_change subtract = 1 }
			}
			
			# Randomness factor
			random_list = {
				1 = { change_variable = { name = brithenig_emergence_progress_change multiply = 0.70 } }
				1 = { change_variable = { name = brithenig_emergence_progress_change multiply = 0.80 } }
				1 = { change_variable = { name = brithenig_emergence_progress_change multiply = 0.90 } }
				1 = { change_variable = { name = brithenig_emergence_progress_change multiply = 1.00 } }
				1 = { change_variable = { name = brithenig_emergence_progress_change multiply = 1.10 } }
				1 = { change_variable = { name = brithenig_emergence_progress_change multiply = 1.20 } }
				1 = { change_variable = { name = brithenig_emergence_progress_change multiply = 1.30 } }
			}
			
			# Actually apply the change
			change_variable = { 
				name = brithenig_emergence_progress 
				add = this.var:brithenig_emergence_progress_change 
			}
			
			# Progress can't be negative
			clamp_variable = { name = brithenig_emergence_progress max = 100 min = 0 }
			
			# Capped at 60% progress before the consolidation/unification phase
			if = {
				limit = {
					exists = struggle:britannia_struggle
					NOT = { 
						struggle:britannia_struggle = { has_struggle_phase_parameter = allow_romanobritish_culture_shifts }
					}
				}
				clamp_variable = { name = brithenig_emergence_progress max = 60 }
			}
			
			if = {
				limit = {
					this.var:brithenig_emergence_progress >= 100
					OR = {
						NOT = { exists = struggle:britannia_struggle }
						struggle:britannia_struggle = { has_struggle_phase_parameter = allow_anglo_saxon_regional_cultures }
					}
					NOT = { culture:brithenig = { has_variable = culture_has_emerged } }
				}			
				culture:romanobritish = { save_scope_as = old_culture }
				# If e_britannia has a Brythonic culture holder, their culture is automatically
				# considered the "parent"
				if = {
					limit = {
						exists = title:e_britannia.holder
						title:e_britannia.holder.culture = { has_cultural_pillar = heritage_brythonic }
					}
					title:e_britannia.holder.culture = { save_scope_as = parent_briton_culture }
				}
				else = {
					ordered_culture_global = {
						limit = { has_cultural_pillar = heritage_brythonic }
						order_by = {
							save_temporary_scope_as = current_culture
							culture:romanobritish = {
								every_culture_county = {
									if = {
										limit = { holder.top_liege.culture = scope:current_culture }
										add = 1
									}
								}
							}
						}
						position = 0
						save_scope_as = parent_briton_culture
					}
				}
				culture:brithenig = {
					save_scope_as = new_culture
					reset_culture_creation_date = yes
					set_variable = culture_has_emerged
					get_all_innovations_from = scope:old_culture
					copy_all_traditions_from = scope:old_culture
					set_ethos_from = scope:old_culture
					set_martial_custom_from = scope:old_culture
					
					# Clear out the Roman-specific traditions, and add in one to compensate
					remove_roman_traditions_effect = yes
					# TODO Need to choose which one we really want
					# add_culture_tradition = tradition_monastic_communities
					add_culture_tradition = tradition_parochialism
					# add_culture_tradition = tradition_hereditary_hierarchy
					
					# Also gets some influence from most dominant Brythonic culture (the "parent")
					get_all_innovations_from = scope:parent_briton_culture
					scope:parent_briton_culture = {
						random_tradition = {
							limit = { NOT = { scope:new_culture = { has_cultural_tradition = prev } } }
							scope:new_culture = { add_culture_tradition = prev }
						}
					}
					
					# Copy acceptances
					copy_acceptances_from_parent_cultures_effect = yes
				}
				if = {
					limit = {
						exists = struggle:britannia_struggle
					}
					struggle:britannia_struggle = { set_culture_as_involved = scope:new_culture }
				}
				
				# If e_britannia is Brythonic and has a Romano-British capital, spawn there 
				# and neighbouring counties
				if = {
					limit = {
						exists = title:e_britannia.holder
						title:e_britannia.holder = {
							culture = { has_cultural_pillar = heritage_brythonic }
							capital_county = { 
								county_can_convert_to_brithenig_culture = yes
								county_is_in_brithenig_culture_area = yes
							}
						}
					}
					save_scope_as = new_culture_spawn_county
				}
				
				# Convert all characters and counties in the spawn point, as well as in
				# neighbouring eligible counties
				scope:new_culture_spawn_county ?= {
					convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
						COUNTY_CULTURE_CONDITION_LHS = "county_can_convert_to_brithenig_culture"
						COUNTY_CULTURE_CONDITION_OP = "="
						COUNTY_CULTURE_CONDITION_RHS = "yes"
						CHAR_CULTURE_CONDITION_LHS = "character_can_convert_to_brithenig_culture"
						CHAR_CULTURE_CONDITION_OP = "="
						CHAR_CULTURE_CONDITION_RHS = "yes"
						NEW_CULTURE = scope:new_culture
					}
					every_neighboring_county = {
						limit = { county_is_in_brithenig_culture_area = yes }
						convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
							COUNTY_CULTURE_CONDITION_LHS = "county_can_convert_to_brithenig_culture"
							COUNTY_CULTURE_CONDITION_OP = "="
							COUNTY_CULTURE_CONDITION_RHS = "yes"
							CHAR_CULTURE_CONDITION_LHS = "character_can_convert_to_brithenig_culture"
							CHAR_CULTURE_CONDITION_OP = "="
							CHAR_CULTURE_CONDITION_RHS = "yes"
							NEW_CULTURE = scope:new_culture
						}
						# Seed some progress in surroundings to get more organic spread in the first few years
						every_neighboring_county = {
							limit = { 
								county_is_in_brithenig_culture_area = yes
								county_can_convert_to_brithenig_culture = yes
							}
							get_culture_spread_success_story_effect = { CULTURE = scope:new_culture }
							scope:culture_spread_progress_story = {
								random_list = {
									1 = { set_variable = { name = progress value = 20 } }
									1 = { set_variable = { name = progress value = 40 } }
									1 = { set_variable = { name = progress value = 60 } }
								}
							}
						}
					}
				}
				
				# If less than 6 counties were converted, try to look for other counties to spawn the culture in
				if = {
					limit = { has_local_variable = no_more_possible_culture_counties }
					remove_local_variable = no_more_possible_culture_counties
				}
				while = {
					limit = {
						scope:new_culture = { 
							any_culture_county = { count < 6 }
						}
						NOT = { has_local_variable = no_more_possible_culture_counties }
					}
					if = {
						limit = { exists = scope:new_culture_county }
						clear_saved_scope = new_culture_county
					}
					# First, try to find counties under Brythonic control that are neighbouring Brythonic counties
					random_county = {
						limit = {
							holder.top_liege.culture = { has_cultural_pillar = heritage_brythonic }
							county_can_convert_to_brithenig_culture = yes
							county_is_in_brithenig_culture_area = yes
							any_neighboring_county = {
								culture = { has_cultural_pillar = heritage_brythonic }
							}
						}
						save_scope_as = new_culture_county
					}
					# Then, just straight up any counties under Brythonic control
					if = {
						limit = { NOT = { exists = scope:new_culture_county } }
						random_county = {
							limit = {
								holder.top_liege.culture = { has_cultural_pillar = heritage_brythonic }
								county_can_convert_to_brithenig_culture = yes
								county_is_in_brithenig_culture_area = yes
							}
							save_scope_as = new_culture_county
						}
					}
					# Convert county if we found one, otherwise end the loop
					if = {
						limit = { exists = scope:new_culture_county }
						scope:new_culture_county = {
							convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
								COUNTY_CULTURE_CONDITION_LHS = "county_can_convert_to_brithenig_culture"
								COUNTY_CULTURE_CONDITION_OP = "="
								COUNTY_CULTURE_CONDITION_RHS = "yes"
								CHAR_CULTURE_CONDITION_LHS = "character_can_convert_to_brithenig_culture"
								CHAR_CULTURE_CONDITION_OP = "="
								CHAR_CULTURE_CONDITION_RHS = "yes"
								NEW_CULTURE = scope:new_culture
							}
						}
					}
					else = {
						set_local_variable = no_more_possible_culture_counties
					}
				}
				
				# Notify everyone
				trigger_event = { id = culture_shifts.0031 }
				every_player = {
					limit = { NOT = { this = root } }
					trigger_event = { id = culture_shifts.0031 }
				}
			}
		}
	}
}

# Notify appearance of Brithenig culture
culture_shifts.0031 = {
	type = character_event
	content_source = dlc_BTWK
	title = culture_shifts.0031.t
	desc = culture_shifts.0031.desc
	theme = realm
	
	left_portrait = {
		character = scope:founder
		animation = personality_honorable
	}
	
	immediate = {
		if = {
			limit = {
				exists = title:e_britannia.holder
				title:e_britannia.holder = {
					culture = { has_cultural_pillar = heritage_brythonic }
				}
			}
			title:e_britannia.holder = { save_scope_as = founder }
		}
		else = {
			ordered_independent_ruler = {
				limit = {
					culture = { has_cultural_pillar = heritage_brythonic }
				}
				order_by = {
					every_realm_county = {
						if = {
							limit = {
								OR = {
									culture = culture:romanobritish
									culture = culture:brithenig
								}
							}
							add = 1
						}
					}
				}
				position = 0
				save_scope_as = founder
			}
		}
		scope:old_culture = { save_scope_as = parent_1 }
		custom_tooltip = culture_notification_tooltip
		custom_tooltip = culture_shifts.0021.culture_spread_tooltip
		if = {
			limit = { culture = scope:new_culture }
			custom_tooltip = culture_shifts.0021.culture_spread_to_us_tooltip
		}
	}

	option = {
		trigger = { 
			culture = scope:new_culture
		}
		name = culture_shifts.0031.a
	}
	
	option = {
		trigger = {
			NOT = { culture = scope:new_culture }
			character_can_convert_to_brithenig_culture = yes
			capital_county = {
				county_is_in_brithenig_culture_area = yes
			}
		}
		name = culture_shifts.0031.b
		custom_tooltip = culture_shifts.0031.b.tt
	}
	
	option = {
		trigger = {
			NOT = { culture = scope:new_culture }
			NAND = {
				character_can_convert_to_brithenig_culture = yes
				capital_county = {
					county_is_in_brithenig_culture_area = yes
				}
			}
			any_sub_realm_county = {
				county_can_convert_to_brithenig_culture = yes
				county_is_in_brithenig_culture_area = yes
			}
		}
		name = culture_shifts.0031.c
		custom_tooltip = culture_shifts.0031.c.tt
	}
	
	option = {
		trigger = {
			NOT = { culture = scope:new_culture }
			NAND = {
				character_can_convert_to_brithenig_culture = yes
				capital_county = {
					county_is_in_brithenig_culture_area = yes
				}
			}
			NOT = {
				any_sub_realm_county = {
					county_can_convert_to_brithenig_culture = yes
					county_is_in_brithenig_culture_area = yes
				}
			}
			culture = { has_cultural_pillar = heritage_latin }
		}
		name = culture_shifts.0031.d
	}
	
	option = {
		trigger = { always = no }
		fallback = yes
		name = culture_shifts.0031.e
	}
}

# Britanno-[Romanized Germanic] hybrid culture emergence
culture_shifts.0032 = {
	scope = none
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		# While there are still Romano-British counties
		culture:romanobritish = { any_culture_county = { count >= 1 } }
	}
	
	immediate = {	
		# TODO Check for Romanized Germanic/Sarmatian hybridization progress
		every_culture_global = {
			limit = { 
				culture_is_romanized_barbarian_culture_trigger = yes
				NOT = { has_variable = britannic_hybrid_culture_has_emerged }
			}
			save_scope_as = current_barbarian_culture
			
			# Check for Britannic hybrid culture emergence
			if = {
				limit = { NOT = { has_variable = britannic_hybrid_emergence_progress } }
				set_variable = { name = britannic_hybrid_emergence_progress value = 0 }
			}
			set_variable = { name = britannic_hybrid_emergence_progress_change value = 0 }
			
			# If at least 20 Romano-British or Britannic Romance provinces have a top liege of this culture,
			# then hybrid culture emergence progresses
			if = {
				limit = {
					any_county = {
						count >= 20
						county_can_convert_to_britannic_hybrid_culture = {
							BARBARIAN_CULTURE = scope:current_barbarian_culture
						}
						NOT = { culture = scope:current_barbarian_culture }
						holder.top_liege.culture = {
							OR = {
								this = scope:current_barbarian_culture
								AND = {
									has_cultural_pillar = heritage_romance
									this.var:ancestral_non_roman_culture = scope:current_barbarian_culture
								}
							}
						}
					}
				}
				change_variable = { name = britannic_hybrid_emergence_progress_change add = 2 }
				
				# If there is a local high king of this culture, happens faster
				if = {
					limit = {
						exists = title:e_romanized_germanic_britannia.holder
						title:e_romanized_germanic_britannia.holder.culture = {
							OR = {
								this = scope:current_barbarian_culture
								AND = {
									has_cultural_pillar = heritage_romance
									this.var:ancestral_non_roman_culture = scope:current_barbarian_culture
								}
							}
						}
					}
					change_variable = { name = britannic_hybrid_emergence_progress_change add = 1 }
				}
				# If there are a lot of controlled provinces, happens faster
				if = {
					limit = {
						any_county = {
							count >= 60
							county_can_convert_to_britannic_hybrid_culture = {
								BARBARIAN_CULTURE = scope:current_barbarian_culture
							}
							NOT = { culture = scope:current_barbarian_culture }
							holder.top_liege.culture = {
								OR = {
									this = scope:current_barbarian_culture
									AND = {
										has_cultural_pillar = heritage_romance
										this.var:ancestral_non_roman_culture = scope:current_barbarian_culture
									}
								}
							}
						}
					}
					change_variable = { name = britannic_hybrid_emergence_progress_change add = 1 }
				}
				else_if = {
					limit = {
						any_county = {
							count >= 40
							county_can_convert_to_britannic_hybrid_culture = {
								BARBARIAN_CULTURE = scope:current_barbarian_culture
							}
							NOT = { culture = scope:current_barbarian_culture }
							holder.top_liege.culture = {
								OR = {
									this = scope:current_barbarian_culture
									AND = {
										has_cultural_pillar = heritage_romance
										this.var:ancestral_non_roman_culture = scope:current_barbarian_culture
									}
								}
							}
						}
					}
					change_variable = { name = britannic_hybrid_emergence_progress_change add = 0.5 }
				}
			}
			else = {		# Progress decays if there is not enough Brythonic control
				change_variable = { name = britannic_hybrid_emergence_progress_change subtract = 1 }
			}
			
			# Randomness factor
			random_list = {
				1 = { change_variable = { name = britannic_hybrid_emergence_progress_change multiply = 0.70 } }
				1 = { change_variable = { name = britannic_hybrid_emergence_progress_change multiply = 0.80 } }
				1 = { change_variable = { name = britannic_hybrid_emergence_progress_change multiply = 0.90 } }
				1 = { change_variable = { name = britannic_hybrid_emergence_progress_change multiply = 1.00 } }
				1 = { change_variable = { name = britannic_hybrid_emergence_progress_change multiply = 1.10 } }
				1 = { change_variable = { name = britannic_hybrid_emergence_progress_change multiply = 1.20 } }
				1 = { change_variable = { name = britannic_hybrid_emergence_progress_change multiply = 1.30 } }
			}
			
			# Actually apply the change
			change_variable = { 
				name = britannic_hybrid_emergence_progress 
				add = this.var:britannic_hybrid_emergence_progress_change 
			}
			
			# Progress can't be negative
			clamp_variable = { name = britannic_hybrid_emergence_progress max = 100 min = 0 }
			
			# Capped at 60% progress before the consolidation/unification phase
			if = {
				limit = {
					exists = struggle:britannia_struggle
					NOT = { 
						struggle:britannia_struggle = { has_struggle_phase_parameter = allow_romanobritish_culture_shifts }
					}
				}
				clamp_variable = { name = britannic_hybrid_emergence_progress max = 60 }
			}
		}
		
		
				# # New culture spawns at capital of kingdom holder if possible
				# if = {
					# limit = {
						# holder ?= {
							# OR = {
								# capital_county = { 
									# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# } 
								# # If the holder holds multiple kingdom or higher titles, only do this if the
								# # capital is actually in the kingdom
								# NOT = {
									# any_held_title = {
										# tier >= tier_kingdom
										# NOT = { this = scope:current_kingdom }
										# NAND = {
											# this = title:e_aengland
											# title:e_aengland.var:aengland_primary_kingdom = scope:current_kingdom
										# }
									# }
								# }
							# }
						# }
					# }
					# holder.capital_county = { 
						# save_scope_as = new_culture_spawn_county
					# }
				# }
				# # Next, try any county held directly by the holder
				# if = {
					# limit = { 
						# NOT = { exists = scope:new_culture_spawn_county }
					# }
					# holder ?= {
						# random_held_title = {
							# limit = {
								# tier = tier_county
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
							# save_scope_as = new_culture_spawn_county
						# }
					# }
				# }
				# # Next, any non-regional culture West Germanic province in the de facto kingdom
				# if = {
					# limit = { 
						# NOT = { exists = scope:new_culture_spawn_county }
					# }
					# holder ?= {
						# random_sub_realm_county = {
							# limit = {
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
							# save_scope_as = new_culture_spawn_county
						# }
					# }
				# }
				# # Next, the capital of any independent parent culture ruler in the kingdom 
				# if = {
					# limit = { 
						# NOT = { exists = scope:new_culture_spawn_county }
					# }
					# random_independent_ruler = {
						# limit = {
							# character_can_convert_to_anglo_saxon_regional_culture = yes
							# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
							# capital_county = {
								# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
						# }
						# capital_county = { save_scope_as = new_culture_spawn_county }
					# }
				# }
				# # Next, any parent culture province under any independent parent culture ruler in the kingdom 
				# if = {
					# limit = { 
						# NOT = { exists = scope:new_culture_spawn_county }
					# }
					# random_independent_ruler = {
						# limit = {
							# character_can_convert_to_anglo_saxon_regional_culture = yes
							# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
							# any_sub_realm_county = {
								# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
						# }
						# random_sub_realm_county = { 
							# limit = {
								# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
							# save_scope_as = new_culture_spawn_county 
						# }
					# }
				# }
				# # Next, any parent culture province under any parent culture ruler in the kingdom 
				# if = {
					# limit = { 
						# NOT = { exists = scope:new_culture_spawn_county }
					# }
					# random_ruler = {
						# limit = {
							# character_can_convert_to_anglo_saxon_regional_culture = yes
							# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
							# any_sub_realm_county = {
								# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
						# }
						# random_sub_realm_county = { 
							# limit = {
								# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
							# save_scope_as = new_culture_spawn_county 
						# }
					# }
				# }
				# # Next, any arbitary parent culture province in the kingdom 
				# if = {
					# limit = { 
						# NOT = { exists = scope:new_culture_spawn_county }
					# }
					# random_county = {
						# limit = {
							# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
							# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
							# county_can_convert_to_anglo_saxon_regional_culture = yes
						# }
						# save_scope_as = new_culture_spawn_county						
					# }
				# }
				# # Should never get here, but:
				# # Next, any non-regional culture West Germanic province under
				# # any independent non-regional culture West Germanic ruler in the kingdom 
				# if = {
					# limit = { 
						# NOT = { exists = scope:new_culture_spawn_county }
					# }
					# random_independent_ruler = {
						# limit = {
							# character_can_convert_to_anglo_saxon_regional_culture = yes
							# any_sub_realm_county = {
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
						# }
						# random_sub_realm_county = { 
							# limit = {
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
							# save_scope_as = new_culture_spawn_county 
						# }
					# }
				# }
				# # Next, any non-regional culture West Germanic province under
				# # any non-regional culture West Germanic ruler in the kingdom 
				# if = {
					# limit = { 
						# NOT = { exists = scope:new_culture_spawn_county }
					# }
					# random_ruler = {
						# limit = {
							# character_can_convert_to_anglo_saxon_regional_culture = yes
							# any_sub_realm_county = {
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
						# }
						# random_sub_realm_county = { 
							# limit = {
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
							# save_scope_as = new_culture_spawn_county 
						# }
					# }
				# }
				# # Any arbitary non-regional culture West Germanic province in the kingdom 
				# if = {
					# limit = { 
						# NOT = { exists = scope:new_culture_spawn_county }
					# }
					# random_county = {
						# limit = {
							# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
							# county_can_convert_to_anglo_saxon_regional_culture = yes
							# culture = { has_cultural_pillar = heritage_west_germanic }
						# }
						# save_scope_as = new_culture_spawn_county						
					# }
				# }
				# # And finally if all else fails, any arbitary convertable province in the kingdom 
				# if = {
					# limit = { 
						# NOT = { exists = scope:new_culture_spawn_county }
					# }
					# random_county = {
						# limit = {
							# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
							# county_can_convert_to_anglo_saxon_regional_culture = yes
						# }
						# save_scope_as = new_culture_spawn_county						
					# }
				# }				
				
				# # Convert all characters and counties in the spawn point, as well as in
				# # neighbouring counties inside the kingdom
				# scope:new_culture_spawn_county ?= {
					# convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
						# COUNTY_CULTURE_CONDITION_LHS = "county_can_convert_to_anglo_saxon_regional_culture"
						# COUNTY_CULTURE_CONDITION_OP = "="
						# COUNTY_CULTURE_CONDITION_RHS = "yes"
						# CHAR_CULTURE_CONDITION_LHS = "character_can_convert_to_anglo_saxon_regional_culture"
						# CHAR_CULTURE_CONDITION_OP = "="
						# CHAR_CULTURE_CONDITION_RHS = "yes"
						# NEW_CULTURE = scope:new_culture
					# }
					# every_neighboring_county = {
						# limit = { county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom } }
						# convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
							# COUNTY_CULTURE_CONDITION_LHS = "county_can_convert_to_anglo_saxon_regional_culture"
							# COUNTY_CULTURE_CONDITION_OP = "="
							# COUNTY_CULTURE_CONDITION_RHS = "yes"
							# CHAR_CULTURE_CONDITION_LHS = "character_can_convert_to_anglo_saxon_regional_culture"
							# CHAR_CULTURE_CONDITION_OP = "="
							# CHAR_CULTURE_CONDITION_RHS = "yes"
							# NEW_CULTURE = scope:new_culture
						# }
						# # Seed some progress in surroundings to get more organic spread in the first few years
						# every_neighboring_county = {
							# limit = { 
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
							# get_culture_spread_success_story_effect = { CULTURE = scope:new_culture }
							# scope:culture_spread_progress_story = {
								# random_list = {
									# 1 = { set_variable = { name = progress value = 20 } }
									# 1 = { set_variable = { name = progress value = 40 } }
									# 1 = { set_variable = { name = progress value = 60 } }
								# }
							# }
						# }
					# }
				# }
	}
}

culture_shifts.0032 = {
	scope = none
	content_source = dlc_BTWK
	hidden = yes
	
	trigger = {
		# While there are still Romano-British counties
		culture:romanobritish = { any_culture_county = { count >= 1 } }
		NOT = { culture:britannic = { has_variable = culture_has_emerged } }
	}
	
	immediate = {
		culture:romanobritish = {
			# Check for Britannic culture emergence progress
			if = {
				limit = { NOT = { has_variable = britannic_emergence_progress } }
				set_variable = { name = britannic_emergence_progress value = 0 }
			}
			set_variable = { name = britannic_emergence_progress_change value = 0 }
			
			# If there is an Imperial heritage realm that rules at least 40 Romano-British counties,
			# Or if there is an Imperial heritage High King of Britannia,
			# then Britannic culture gets no emergence progress
			# Alternatively, if there is an Imperial heritage realm that rules at least 5 Romano-British counties,
			# and at least 80 total Imperial heritage provinces, that also stops Britannic emergence
			if = {
				limit = {
					# In order to get any progress at all, there must be at least one Romano-British provinces
					# that is not going to be prioritized for another British Romance culture
					any_culture_county = {
						county_can_convert_to_britannic_culture = yes
					}
					NOR = {
						title:e_britannia.holder ?= { culture = { has_cultural_pillar = heritage_latin } }
						any_independent_ruler = {
							culture = { has_cultural_pillar = heritage_latin }
							OR = {
								any_realm_county = {
									count >= 40
									culture = culture:romanobritish
								}
								AND = {
									any_realm_county = {
										count >= 5
										culture = culture:romanobritish
									}
									any_realm_county = {
										count >= 80
										culture = { has_cultural_pillar = heritage_latin }
									}
								}
							}
						}
					}
				}
				# If there is a realm close to the limit, the emergence is somewhat slower
				if = {
					limit = {
						any_independent_ruler = {
							culture = { has_cultural_pillar = heritage_latin }
							OR = {
								any_realm_county = {
									count >= 35
									culture = culture:romanobritish
								}
							}
						}
					}
					change_variable = { name = britannic_emergence_progress_change add = 1.5 }
				}
				else_if = {
					limit = {
						any_independent_ruler = {
							culture = { has_cultural_pillar = heritage_latin }
							OR = {
								any_realm_county = {
									count >= 30
									culture = culture:romanobritish
								}
							}
						}
					}
					change_variable = { name = britannic_emergence_progress_change add = 2.25 }
				}
				else = {
					change_variable = { name = britannic_emergence_progress_change add = 3 }
				}
			}
			else = {		# Progress decays if there is a strong enough Imperial realm
				change_variable = { name = britannic_emergence_progress_change subtract = 2 }
			}
			
			# Randomness factor
			random_list = {
				1 = { change_variable = { name = britannic_emergence_progress_change multiply = 0.70 } }
				1 = { change_variable = { name = britannic_emergence_progress_change multiply = 0.80 } }
				1 = { change_variable = { name = britannic_emergence_progress_change multiply = 0.90 } }
				1 = { change_variable = { name = britannic_emergence_progress_change multiply = 1.00 } }
				1 = { change_variable = { name = britannic_emergence_progress_change multiply = 1.10 } }
				1 = { change_variable = { name = britannic_emergence_progress_change multiply = 1.20 } }
				1 = { change_variable = { name = britannic_emergence_progress_change multiply = 1.30 } }
			}
			
			# Actually apply the change
			change_variable = { 
				name = britannic_emergence_progress 
				add = this.var:britannic_emergence_progress_change 
			}
			
			# Progress can't be negative
			clamp_variable = { name = britannic_emergence_progress min = 0 }
			
			# Capped at 60% progress before the consolidation/unification phase
			if = {
				limit = {
					exists = struggle:britannia_struggle
					NOT = { 
						struggle:britannia_struggle = { has_struggle_phase_parameter = allow_romanobritish_culture_shifts }
					}
				}
				clamp_variable = { name = britannic_emergence_progress max = 60 }
			}
		
			# If you reach 100% progress, then the new culture is created	
			if = {
				limit = {
					this.var:britannic_emergence_progress >= 100
					OR = {
						NOT = { exists = struggle:britannia_struggle }
						struggle:britannia_struggle = { has_struggle_phase_parameter = allow_anglo_saxon_regional_cultures }
					}
					NOT = { culture:britannic = { has_variable = culture_has_emerged } }
				}			
				culture:romanobritish = { save_scope_as = old_culture }
				culture:britannic = {
					save_scope_as = new_culture
					reset_culture_creation_date = yes
					set_variable = culture_has_emerged
					get_all_innovations_from = scope:old_culture
					copy_all_traditions_from = scope:old_culture
					set_ethos_from = scope:old_culture
					set_martial_custom_from = scope:old_culture
					
					# Clear out the Roman-specific traditions, and add in one to compensate
					remove_roman_traditions_effect = yes
					# TODO Need to choose which one we really want
					# add_culture_tradition = tradition_monastic_communities
					add_culture_tradition = tradition_parochialism
					# add_culture_tradition = tradition_hereditary_hierarchy
					
					# Copy acceptances
					copy_acceptances_from_parent_cultures_effect = yes
				}
				if = {
					limit = {
						exists = struggle:britannia_struggle
					}
					struggle:britannia_struggle = { set_culture_as_involved = scope:new_culture }
				}
				
				# TODO New culture spawns at capitals of random independent Romano-British realms
				random_independent_ruler = {
					limit = {
						character_can_convert_to_britannic_culture = yes
						capital_county = {
							county_can_convert_to_britannic_culture = yes
							county_is_in_britannic_culture_area = yes
						}
					}
					capital_county = { save_scope_as = new_culture_spawn_county }
				}
				
				# Convert all characters and counties in the spawn point, as well as in
				# neighbouring eligible counties
				scope:new_culture_spawn_county ?= {
					convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
						COUNTY_CULTURE_CONDITION_LHS = "county_can_convert_to_britannic_culture"
						COUNTY_CULTURE_CONDITION_OP = "="
						COUNTY_CULTURE_CONDITION_RHS = "yes"
						CHAR_CULTURE_CONDITION_LHS = "character_can_convert_to_britannic_culture"
						CHAR_CULTURE_CONDITION_OP = "="
						CHAR_CULTURE_CONDITION_RHS = "yes"
						NEW_CULTURE = scope:new_culture
					}
					every_neighboring_county = {
						limit = { county_is_in_britannic_culture_area = yes }
						convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
							COUNTY_CULTURE_CONDITION_LHS = "county_can_convert_to_britannic_culture"
							COUNTY_CULTURE_CONDITION_OP = "="
							COUNTY_CULTURE_CONDITION_RHS = "yes"
							CHAR_CULTURE_CONDITION_LHS = "character_can_convert_to_britannic_culture"
							CHAR_CULTURE_CONDITION_OP = "="
							CHAR_CULTURE_CONDITION_RHS = "yes"
							NEW_CULTURE = scope:new_culture
						}
						# Seed some progress in surroundings to get more organic spread in the first few years
						every_neighboring_county = {
							limit = { 
								county_is_in_britannic_culture_area = yes
								county_can_convert_to_britannic_culture = yes
							}
							get_culture_spread_success_story_effect = { CULTURE = scope:new_culture }
							scope:culture_spread_progress_story = {
								random_list = {
									1 = { set_variable = { name = progress value = 20 } }
									1 = { set_variable = { name = progress value = 40 } }
									1 = { set_variable = { name = progress value = 60 } }
								}
							}
						}
					}
				}
			}
			
			if = {
				limit = {
					# TODO Actually do this
					this.var:romanized_germanic_hybrid_emergence_progress >= 100
					OR = {
						NOT = { exists = struggle:britannia_struggle }
						struggle:britannia_struggle = { has_struggle_phase_parameter = allow_anglo_saxon_regional_cultures }
					}
				}			
				culture:romanobritish = { save_scope_as = old_culture }
				# Use a new unlanded character so we have complete control over the cultures shifts
				create_character = {
					dynasty = none
					location = scope:target_romanized_germanic_culture_ruler.capital_province
					culture = scope:old_culture
					faith = faith:catholic
					gender = male
					save_scope_as = culture_creator
				}
				scope:culture_creator = {
					# Stops normal notifications from creating new cultures
					add_character_flag = suppress_culture_notifications_and_achievements
					create_hybrid_culture = scope:target_romanized_germanic_culture
					death = natural
				}				
				scope:new_culture = {
					set_heritage_from = culture:britannic		# Can't set directly for some reason
					set_language_from = culture:britannic
					set_name_list = name_list_britannic
					set_culture_name = {
						noun = british_romance_romanized_germanic_hybrid_culture_noun
						collective_noun = british_romance_romanized_germanic_hybrid_collective_noun
						prefix = british_romance_romanized_germanic_hybrid_prefix
					}
				}
			}
		}
				
				# # If less than 6 counties were converted, try to look for other counties to spawn the culture in
				# if = {
					# limit = { has_local_variable = no_more_possible_culture_counties }
					# remove_local_variable = no_more_possible_culture_counties
				# }
				# while = {
					# limit = {
						# scope:new_culture = { 
							# OR = {
								# any_culture_county = { count < 4 }
								# AND = {		# Sussex only gets to grow to 4 counties because of how small it is
									# any_culture_county = { count < 6 }
									# NOT = { this.var:anglo_saxon_regional_culture_kingdom = title:k_sussex }
								# }
							# }
						# }
						# NOT = { has_local_variable = no_more_possible_culture_counties }
					# }
					# if = {
						# limit = { exists = scope:new_culture_county }
						# clear_saved_scope = new_culture_county
					# }
					# # First, try to just find adjacent convertable parent culture provinces
					# scope:new_culture = { 
						# random_culture_county = {
							# limit = {
								# any_neighboring_county = {
									# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
									# county_can_convert_to_anglo_saxon_regional_culture = yes
									# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# }
							# }
							# random_neighboring_county = {
								# limit = {
									# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
									# county_can_convert_to_anglo_saxon_regional_culture = yes
									# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# }
								# save_scope_as = new_culture_county
							# }
						# }
					# }
					# # Then, try to find convertable parent provinces in the kingdom if it exists
					# if = {
						# limit = { NOT = { exists = scope:new_culture_county } }
						# holder ?= {
							# random_sub_realm_county = {
								# limit = {
									# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
									# county_can_convert_to_anglo_saxon_regional_culture = yes
									# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# }
								# save_scope_as = new_culture_county
							# }
						# }
					# }
					# # Then, try to just find adjacent convertable provinces
					# if = {
						# limit = { NOT = { exists = scope:new_culture_county } }
						# scope:new_culture = { 
							# random_culture_county = {
								# limit = {
									# any_neighboring_county = {
										# county_can_convert_to_anglo_saxon_regional_culture = yes
										# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
									# }
								# }
								# random_neighboring_county = {
									# limit = {
										# county_can_convert_to_anglo_saxon_regional_culture = yes
										# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
									# }
									# save_scope_as = new_culture_county
								# }
							# }
						# }
					# }
					# # Then, try to find convertable provinces in the kingdom if it exists
					# if = {
						# limit = { NOT = { exists = scope:new_culture_county } }
						# holder ?= {
							# random_sub_realm_county = {
								# limit = {
									# county_can_convert_to_anglo_saxon_regional_culture = yes
									# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# }
								# save_scope_as = new_culture_county
							# }
						# }
					# }
					# # Then, try to find convertable provinces under any independent parent culture convertable ruler in the kingdom
					# if = {
						# limit = { NOT = { exists = scope:new_culture_county } }							
						# random_independent_ruler = {
							# limit = {
								# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								# character_can_convert_to_anglo_saxon_regional_culture = yes
								# any_sub_realm_county = {
									# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
									# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
									# county_can_convert_to_anglo_saxon_regional_culture = yes
								# }
							# }
							# if = {
								# limit = {
									# capital_county = {
										# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
										# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
										# county_can_convert_to_anglo_saxon_regional_culture = yes
									# }
								# }
								# capital_county = { save_scope_as = new_culture_county }
							# }
							# else = {
								# random_sub_realm_county = {
									# limit = {
										# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
										# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
										# county_can_convert_to_anglo_saxon_regional_culture = yes
									# }
									# save_scope_as = new_culture_county
								# }
							# }
						# }
					# }
					# # Then, just straight up parent culture province
					# if = {
						# limit = { NOT = { exists = scope:new_culture_county } }
						# random_county = {
							# limit = {
								# scope:new_culture = { is_child_culture_of_trigger = { TARGET = prev.culture } }
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
							# save_scope_as = new_culture_county
						# }
					# }
					# # Then, try to find convertable provinces under any independent convertable ruler in the kingdom
					# if = {
						# limit = { NOT = { exists = scope:new_culture_county } }							
						# random_independent_ruler = {
							# limit = {
								# character_can_convert_to_anglo_saxon_regional_culture = yes
								# any_sub_realm_county = {
									# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
									# county_can_convert_to_anglo_saxon_regional_culture = yes
								# }
							# }
							# if = {
								# limit = {
									# capital_county = {
										# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
										# county_can_convert_to_anglo_saxon_regional_culture = yes
									# }
								# }
								# capital_county = { save_scope_as = new_culture_county }
							# }
							# else = {
								# random_sub_realm_county = {
									# limit = {
										# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
										# county_can_convert_to_anglo_saxon_regional_culture = yes
									# }
									# save_scope_as = new_culture_county
								# }
							# }
						# }
					# }
					# # Then, just straight up any convertable province
					# if = {
						# limit = { NOT = { exists = scope:new_culture_county } }
						# random_county = {
							# limit = {
								# county_is_in_anglo_saxon_regional_culture_kingdom = { KINGDOM = scope:current_kingdom }
								# county_can_convert_to_anglo_saxon_regional_culture = yes
							# }
							# save_scope_as = new_culture_county
						# }
					# }
					# # Convert county if we found one, otherwise end the loop
					# if = {
						# limit = { exists = scope:new_culture_county }
						# scope:new_culture_county = {
							# convert_county_and_domiciles_and_holder_if_capital_with_court_effect = {
								# COUNTY_CULTURE_CONDITION_LHS = "county_can_convert_to_anglo_saxon_regional_culture"
								# COUNTY_CULTURE_CONDITION_OP = "="
								# COUNTY_CULTURE_CONDITION_RHS = "yes"
								# CHAR_CULTURE_CONDITION_LHS = "character_can_convert_to_anglo_saxon_regional_culture"
								# CHAR_CULTURE_CONDITION_OP = "="
								# CHAR_CULTURE_CONDITION_RHS = "yes"
								# NEW_CULTURE = scope:new_culture
							# }
						# }
					# }
					# else = {
						# set_local_variable = no_more_possible_culture_counties
					# }
				# }
				
				# # Notify everyone
				# this.holder ?= { trigger_event = { id = culture_shifts.0011 } }
				# every_player = {
					# limit = { NOT = { prev.holder ?= this } }
					# trigger_event = { id = culture_shifts.0011 }
				# }
				
				# # Clear scopes in case multiple regional cultures spawn simultaneously
				# clear_saved_scope = old_culture
				# clear_saved_scope = new_culture
				# clear_saved_scope = dominant_west_germanic_culture
				# clear_saved_scope = new_culture_spawn_county
	}
}